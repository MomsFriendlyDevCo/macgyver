"use strict";function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(iter){if(Symbol.iterator in Object(iter)||"[object Arguments]"===Object.prototype.toString.call(iter))return Array.from(iter)}function _arrayWithoutHoles(arr){if(Array.isArray(arr)){for(var i=0,arr2=new Array(arr.length);i<arr.length;i++)arr2[i]=arr[i];return arr2}}angular.module("macgyver",["angular-bs-tooltip","angular-ui-scribble","dragularModule","ngSanitize","ngTreeTools","ui.select"]).provider("$macgyver",function(){var $macgyver=this;$macgyver.widgets={},$macgyver.settings={urlResolver:void 0},$macgyver.register=function(id,properties){$macgyver.widgets[id]=properties||{},$macgyver.widgets[id].id=id;var domName=_.kebabCase(id);return _.defaults($macgyver.widgets[id],{template:"<".concat(domName,' config="w" data="$ctrl.data[w.id]"></').concat(domName,">"),title:_.startCase(id),userPlaceable:!0,category:"Misc",format:!1,formatAlign:"left"}),$macgyver},$macgyver.getDataTree=function(root,useDefaults){if(root)return $macgyver.widgets[root.type]?$macgyver.widgets[root.type].isContainer&&!$macgyver.widgets[root.type].isContainerArray?_(root.items).mapKeys("id").mapValues(function(i){return $macgyver.getDataTree(i)}).value():$macgyver.widgets[root.type].isContainer&&$macgyver.widgets[root.type].isContainerArray?[_(root.items).mapKeys("id").mapValues(function(i){return $macgyver.getDataTree(i)}).value()]:useDefaults?root.default:null:(console.warn('Unknown widget type "'+root.type+'" for item ID "'+root.id+'" - assuming is not a container'),useDefaults?root.default:null);console.warn("Empty MacGyver form tree")},$macgyver.getForm=function($scope){var direction=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"downwards",want=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"$ctrl",form={};if("downwards"==direction)$scope.$broadcast("mg.getForm",form);else{if("upwards"!=direction)throw new Error("Unknown form search direction: "+direction);$scope.$emit("mg.getForm",form)}return form[want]},$macgyver.getAll=function($scope){var components={};return $scope.$broadcast("mg.get",components),components},$macgyver.getPath=function($scope){var overridePath=_.get($scope,["$ctrl","config","mgPath"]);if(overridePath&&_.isArray(overridePath))return overridePath;if(_.isString(overridePath))return overridePath.split(".");var stack=[];return $scope.$emit("mg.getStack",stack),stack.map(function(i){return i.id}).filter(function(i){return!!i})},$macgyver.inject=function($scope,$ctrl){return $scope.$on("mg.get",function(e,c){$ctrl.config&&(c[$ctrl.config.id]=$ctrl)}),$scope.$on("mg.getStack",function(e,c){return c.push({id:$ctrl.config.id,$ctrl:$ctrl,$scope:$scope}),c}),$scope.assignConfig=function(){for(var _len=arguments.length,keys=new Array(_len),_key=0;_key<_len;_key++)keys[_key]=arguments[_key];if(!$ctrl.config.type)throw new Error("Cannot determine type of widget to assign defaults, check that assignDefaults is being called within $onInit");keys.length||(keys=_.keys($macgyver.widgets[$ctrl.config.type].config)),keys.forEach(function(key){if(angular.isUndefined($ctrl.config[key])){var widget=$macgyver.widgets[$ctrl.config.type];if(!widget)throw new Error('Unable to assign default "'.concat(key,'" as no default exists in "').concat($ctrl.config.type,'" config'));if(!_.has(widget.config[key],"default"))throw new Error('The config key "'.concat(key,'" for widget "').concat($ctrl.config.type,'" does not have a default value - remove the call to assignDefaults'));$ctrl.config[key]=widget.config[key].default}})},$macgyver},$macgyver.broadcast=function($scope){for(var mgForm=$macgyver.getForm($scope,"upwards","$scope"),_len2=arguments.length,message=new Array(1<_len2?_len2-1:0),_key2=1;_key2<_len2;_key2++)message[_key2-1]=arguments[_key2];return mgForm?mgForm.$broadcast.apply(mgForm,message):void 0},$macgyver.forEach=function(spec,cb){return function forEachScanner(root,path){if(_.isObject(root)){var rootPath=(path?path+".":"")+(root&&root.id?root.id:"");cb(root,rootPath),_.isArray(root.items)&&root.items.forEach(function(i){return forEachScanner(i,rootPath)})}}(spec),$macgyver},$macgyver.flattenSpec=function(spec){var res={};return $macgyver.forEach(spec,function(widget,path){return res[path]=widget}),res},$macgyver.flatten=function(root,options){var settings=_.defaults(options,{maxDepth:0,filter:void 0,filterChildren:void 0,type:"auto",want:"object",wantPath:!1,wantSpec:!1,wantSpecPath:!1});if(settings.filter&&!_.isFunction(settings.filter)&&_.isObject(settings.filter)&&(settings.filter=_.matches(settings.filter)),"object"!=settings.want&&"array"!=settings.want)throw new Error('$macgyver.flatten({want}) can only be "object" or "array"');if("auto"==settings.type)if(root.items)settings.type="spec";else{if(!_.every(root,function(k,v){return!v.items}))throw new Error("Cannot determine type of input object to $macgyver.flatten(), specify it explicitly with {type=spec|data}");settings.type="data"}var found={},foundAll={};return function depthScanner(root,path,argument_2){var depth=2<arguments.length&&void 0!==argument_2?argument_2:0;if(_.isObject(root)){var rootPath=(path?path+".":"")+(root&&root.id?root.id:"");settings.wantPath&&(foundAll[root.id]=root),settings.filter&&!settings.filter.call(root,root,path,depth)||(found[root.id]=root);var recursionSubject="spec"==settings.type?root.items:root;!_.isArray(recursionSubject)||settings.filterChildren&&!settings.filterChildren.call(root,root,path,depth)||settings.maxDepth&&!(depth<=settings.maxDepth)||recursionSubject.forEach(function(i){return depthScanner(i,rootPath,depth+1)})}}(root),(settings.wantPath||settings.wantSpec||settings.wantSpecPath)&&(found=_.mapValues(found,function(v,k){return settings.wantSpec&&(v.spec=$macgyver.widgets[v.type]),settings.wantSpecPath&&(v.specPath=k),settings.wantPath&&(v.path=k.split(".").filter(function(parent){return!foundAll[parent].ignoreScope}).join(".")),v})),"object"==settings.want?found:_.map(found)},$macgyver.neatenSpec=function(spec,options){var settings=_.defaults(options,{checkRootNoId:!0,checkRootShowTitle:!0,checkWidgetType:!0,checkWidgetIds:!0,checkWidgetContainerIgnoreScope:!0,reporter:function(msg){return console.log(msg)}});settings.reporter||(settings.reporter=function(){}),settings.checkRootNoId&&spec.id&&(delete spec.id,settings.reporter("Root node should not have an ID - removed")),settings.checkRootShowTitle&&_.isUndefined(spec.showTitle)&&(spec.showTitle=!1,settings.reporter("Root node should not have showTitle enabled"));var flatSpec=$macgyver.flattenSpec(spec);return $macgyver.forEach(spec,function(widget,path){if(""!=path&&(settings.checkWidgetType&&($macgyver.widgets[widget.type]||(settings.reporter("Invalid or unregistered MacGyver widget ".concat(widget.type," - transforming into a mgText")),widget.type="mgText")),settings.checkWidgetIds&&(!widget.id||/^\$*ROOT/.test(widget.id)))){for(var tryId,oldId=widget.id;tryId=widget.type+"-"+_.times(5,function(i){return _.sample("abcdefghijklmnopqrstuvwxyz").split("")}).join(""),flatSpec[tryId];);widget.id=tryId,settings.reporter((oldId?"Invalid widget ID ".concat(oldId):"Non-existant ID for widget ".concat(widget.type))+"generated new ID as ".concat(widget.id)),settings.checkWidgetContainerIgnoreScope&&"mgContainer"==widget.type&&_.isUndefined(widget.ignoreScope)&&(widget.ignoreScope=!0,settings.reporter("Forced mgContainer to ignoreScope"))}}),spec},$macgyver.specDataPrototype=function(spec){var tree={};return $macgyver.forEach(spec,function(widget,path){if($macgyver.widgets[widget.type].isContainer){var widgetPath=path.split(".").slice(1);if(!widgetPath.length)return;_.set(tree,widgetPath,$macgyver.widgets[widget.type].isContainerArray?[]:{})}}),tree},$macgyver.$get=function(){return $macgyver}}).filter("filesize",function(){return filesize}).filter("mgFilterObject",function(){return function(obj,filter){return angular.isObject(filter)?_.pickBy(obj,function(i){return _.isMatch(i,filter)}):angular.isFunction(filter)?_.pickBy(obj,filter):void 0}}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgAlert",{title:"Alert Box",icon:"fa fa-exclamation-triangle",category:"General Decoration",config:{text:{type:"mgText",default:"This is an alert!"},style:{type:"mgChoiceButtons",default:"alert-info",iconSelected:"fa fa-fw fa-check",iconDefault:"fa fa-fw",enum:[{id:"alert-success",class:"btn-success"},{id:"alert-info",class:"btn-info"},{id:"alert-warning",class:"btn-warning"},{id:"alert-danger",class:"btn-danger"}]}}})}]).component("mgAlert",{bindings:{config:"<"},controller:["$macgyver","$scope",function($macgyver,$scope){$macgyver.inject($scope,this)}],template:'\n\t\t\t<div class="alert" ng-class="$ctrl.config.style">{{$ctrl.config.text || $scope.data}}</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgCheckBox",{title:"Check Box",icon:"fa fa-check-square-o",category:"Simple Inputs",config:{},format:function(v){return v?"Yes":"No"},formatAlign:"center"})}]).component("mgCheckBox",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'<div class="text-center">\n\t\t\t<input ng-model="$ctrl.data" type="checkbox"/>\n\t\t</div>'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgChoiceButtons",{title:"Button multiple-choice",icon:"fa fa-check-square",category:"Choice Selectors",config:{enum:{type:"mgList",title:"The list of items to display",default:["Foo","Bar","Baz"]},classWrapper:{type:"mgText",default:"btn-group",title:"Group CSS class",advanced:!0},itemClassActive:{type:"mgText",default:"btn btn-primary",advanced:!0},itemClassInactive:{type:"mgText",default:"btn btn-default",advanced:!0}},format:!0})}]).component("mgChoiceButtons",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.enumIter=[],$scope.$watchCollection("$ctrl.config.enum",function(){$ctrl.config.enum&&(_.isArray($ctrl.config.enum)&&_.isString($ctrl.config.enum[0])?$ctrl.enumIter=$ctrl.config.enum.map(function(i){return{id:_.camelCase(i),title:i}}):_.isArray($ctrl.config.enum)&&_.isObject($ctrl.config.enum[0])&&($ctrl.enumIter=$ctrl.config.enum))}),$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)}),$ctrl.$onInit=function(){return $scope.assignConfig("itemClassInactive","itemClassActive")}}],template:'\n\t\t\t<div ng-class="$ctrl.config.classWrapper || \'btn-group\'">\n\t\t\t\t<a ng-repeat="item in $ctrl.enumIter track by item.id" ng-class="\n\t\t\t\t\t$ctrl.data == item.id\n\t\t\t\t\t? item.classSelected || $ctrl.config.itemClassActive\n\t\t\t\t\t: item.class || $ctrl.config.itemClassInactive\n\t\t\t\t" ng-click="$ctrl.data = item.id">\n\t\t\t\t\t{{item.title}}\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgChoiceRadio",{title:"Radio multiple-choice",icon:"fa fa-list-ul",category:"Choice Selectors",config:{enum:{type:"mgList",title:"The list of items to display",default:["Foo","Bar","Baz"]}},format:!0})}]).component("mgChoiceRadio",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.enumIter=[],$scope.$watchCollection("$ctrl.config.enum",function(){$ctrl.config.enum&&(_.isArray($ctrl.config.enum)&&_.isString($ctrl.config.enum[0])?$ctrl.enumIter=$ctrl.config.enum.map(function(i){return{id:_.camelCase(i),title:i}}):_.isArray($ctrl.config.enum)&&_.isObject($ctrl.config.enum[0])&&($ctrl.enumIter=$ctrl.config.enum))}),$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<div class="radio" ng-repeat="item in $ctrl.enumIter track by item.id">\n\t\t\t\t<label>\n\t\t\t\t\t<input ng-model="$ctrl.data" type="radio" name="{{$ctrl.config.id}}" value="{{item.id}}"/>\n\t\t\t\t\t{{item.title}}\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgChoiceDropdown",{title:"Dropdown multiple-choice",icon:"fa fa-chevron-circle-down",category:"Choice Selectors",config:{url:{type:"mgUrl",help:"Data feed URL"},enum:{type:"mgList",title:"The list of items to display",default:["Foo","Bar","Baz"]},textPrompt:{type:"mgText",default:"Choose an item..."},textInnerPrompt:{type:"mgText",default:"Select an item..."},displayPrimaryField:{type:"mgText",default:"title",help:"The field of each enum item to display as the primary selection text"},displaySecondaryField:{type:"mgText",help:"The field of each enum to display as a secondary item"}},format:!0})}]).component("mgChoiceDropdown",{bindings:{config:"<",data:"="},controller:["$http","$macgyver","$scope",function($http,$macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.enumIter=[],$scope.$watchCollection("$ctrl.config.enum",function(){$ctrl.config.enum&&(_.isArray($ctrl.config.enum)&&_.isString($ctrl.config.enum[0])?$ctrl.enumIter=$ctrl.config.enum.map(function(i){return{id:_.camelCase(i),title:i}}):_.isArray($ctrl.config.enum)&&_.isObject($ctrl.config.enum[0])&&($ctrl.enumIter=$ctrl.config.enum))}),$scope.$watch("$ctrl.url",function(){$ctrl.config.url&&$http.get($ctrl.config.url).then(function(res){return $ctrl.enumIter=res.data.map(function(i){return i._id&&(i.id=i._id,delete i._id),i})})}),$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<ui-select ng-model="$ctrl.data" title="{{$ctrl.config.textPrompt || \'Choose an item...\'}}">\n\t\t\t\t<ui-select-match placeholder="{{$ctrl.config.textInnerPrompt || \'Select an item...\'}}">{{$select.selected[$ctrl.config.displayPrimaryField || \'title\']}}</ui-select-match>\n\t\t\t\t<ui-select-choices repeat="item.id as item in $ctrl.enumIter | filter:$select.search track by item.id" group-by="$ctrl.config.groupBy">\n\t\t\t\t\t<div ng-bind-html="item[$ctrl.config.displayPrimaryField || \'title\'] | highlight:$select.search"></div>\n\t\t\t\t\t<small ng-if="$ctrl.config.displaySecondaryField" ng-bind-html="item[$ctrl.config.displaySecondaryField] | highlight:$select.search"></small>\n\t\t\t\t</ui-select-choices>\n\t\t\t</ui-select>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgContainer",{title:"Container layout",icon:"fa fa-dropbox",category:"Layout",isContainer:!0,template:'<mg-container config="w" data="$ctrl.data"></mg-container>',config:{ignoreScope:{type:"mgToggle",default:!1,title:"Ignore Scope",help:"Flatten the data scope with the parent level - i.e. dont nest any child element inside an object when saving data"},layout:{type:"mgChoiceDropdown",title:"Layout profile",help:"How to layout child elements",default:"form",enum:[{id:"form",title:"Standard form layout"},{id:"panel",title:"Panel based layout"},{id:"card",title:"Card based layout"},{id:"columns",title:"Vertical column layout"}]},layoutStyle:{title:"Layout style",help:"Styling to use if layout is in panel mode",type:"mgChoiceButtons",default:"panel-default",iconSelected:"fa fa-fw fa-check",iconDefault:"fa fa-fw",enum:[{id:"default",class:"btn-default"},{id:"success",class:"btn-success"},{id:"info",class:"btn-info"},{id:"warning",class:"btn-warning"},{id:"danger",class:"btn-danger"}]},layoutColorful:{type:"mgToggle",default:!1,title:"Fill layout color",help:"Shade the entire panel in the layout style"}},configChildren:{help:{type:"mgText",title:"Help text",help:"Optional help text for the item - just like what you are reading now"},showTitle:{type:"mgToggle",default:!0,title:"Show Title",help:"Whether to show the side title for this element"},title:{type:"mgText",title:"Title"},rowClass:{type:"mgChoiceDropdown",title:"Styling",help:"Additional styling to apply to the widget",default:"",enum:[{id:"",title:"Normal"},{id:"mgContainerRowLarge",title:"Large text"}]}}})}]).component("mgContainer",{bindings:{config:"<",data:"="},controller:["$element","$macgyver","$scope",function($element,$macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.isEditing=!!$element.closest("mg-form-editor").length,$ctrl.widgetAddChild=function(){return $scope.$emit("mg.mgFormEditor.widgetAdd","inside",$ctrl.config.id)}}],template:["$macgyver",function($macgyver){return'\n\t\t\t<div ng-switch="$ctrl.config.layout">\n\t\t\t\t<div ng-switch-when="panel">\n\t\t\t\t\t<div class="panel" ng-class="[$ctrl.config.layoutStyle ? \'panel-\' + $ctrl.config.layoutStyle : \'panel-default\', $ctrl.config.layoutColorful ? \'panel-colorful\' : undefined]">\n\t\t\t\t\t\t<div class="panel-heading">{{$ctrl.config.title}}</div>\n\t\t\t\t\t\t<div class="panel-body">\n\t\t\t\t\t\t\t<div ng-repeat="w in $ctrl.config.items track by w.id" ng-switch="w.type" data-path="{{w.id}}" class="form-group row mgComponent" ng-class="[w.mgValidation == \'error\' ? \'has-error\' : \'\', w.rowClass]">\n\t\t\t\t\t\t\t\t<label ng-if="w.showTitle || w.showTitle===undefined" class="control-label text-left" ng-class="!(w.type==\'mgLabel\' || w.type==\'mgHtml\') || ($ctrl.data[w.id] || w.text) ? \'col-sm-3\' : \'col-sm-12\'">{{w.title}}</label>\n\t\t\t\t\t\t\t\t<div ng-if="!(w.type==\'mgLabel\' || w.type==\'mgHtml\') || ($ctrl.data[w.id] || w.text)" ng-class="w.showTitle || w.showTitle===undefined ? \'col-sm-9\' : \'col-sm-12\'">\n\t\t\t\t\t\t\t\t\t'+_.map($macgyver.widgets,function(w){return'<div ng-switch-when="'.concat(w.id,'">')+w.template+"</div>"}).join("\n")+'\n\t\t\t\t\t\t\t\t\t<div ng-switch-default class="alert alert-danger">Unknown MacGyver widget type : "{{w.type}}"</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class="help-block" ng-if="w.help" ng-class="w.showTitle || w.showTitle===undefined ? \'col-sm-9 col-sm-offset-3\' : \'col-sm-12\'">{{w.help}}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div ng-if="$ctrl.isEditing && !$ctrl.config.items.length" class="text-center">\n\t\t\t\t\t\t\t\t<mg-form-editor-inserter config="$ctrl.config" data="$ctrl.data"></mg-form-editor-inserter>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div ng-switch-when="card">\n\t\t\t\t\t<div class="card" ng-class="[$ctrl.config.layoutStyle ? \'card-\' + $ctrl.config.layoutStyle : \'card-default\', $ctrl.config.layoutColorful ? \'card-colorful\' : undefined]">\n\t\t\t\t\t\t<div class="card-header">{{$ctrl.config.title}}</div>\n\t\t\t\t\t\t<div class="card-body">\n\t\t\t\t\t\t\t<div ng-repeat="w in $ctrl.config.items track by w.id" ng-switch="w.type" data-path="{{w.id}}" class="form-group row mgComponent" ng-class="[w.mgValidation == \'error\' ? \'has-error\' : \'\', w.rowClass]">\n\t\t\t\t\t\t\t\t<label ng-if="w.showTitle || w.showTitle===undefined" class="control-label text-left" ng-class="!(w.type==\'mgLabel\' || w.type==\'mgHtml\') || ($ctrl.data[w.id] || w.text) ? \'col-sm-3\' : \'col-sm-12\'">{{w.title}}</label>\n\t\t\t\t\t\t\t\t<div ng-if="!(w.type==\'mgLabel\' || w.type==\'mgHtml\') || ($ctrl.data[w.id] || w.text)" ng-class="w.showTitle || w.showTitle===undefined ? \'col-sm-9\' : \'col-sm-12\'">\n\t\t\t\t\t\t\t\t\t'+_.map($macgyver.widgets,function(w){return'<div ng-switch-when="'.concat(w.id,'">')+w.template+"</div>"}).join("\n")+'\n\t\t\t\t\t\t\t\t\t<div ng-switch-default class="alert alert-danger">Unknown MacGyver widget type : "{{w.type}}"</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class="help-block" ng-if="w.help" ng-class="w.showTitle || w.showTitle===undefined ? \'col-sm-9 col-sm-offset-3\' : \'col-sm-12\'">{{w.help}}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div ng-if="$ctrl.isEditing && !$ctrl.config.items.length" class="text-center">\n\t\t\t\t\t\t\t\t<mg-form-editor-inserter config="$ctrl.config" data="$ctrl.data"></mg-form-editor-inserter>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div ng-switch-when="columns">\n\t\t\t\t\t<table class="table table-bordered" style="width: 100%">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th ng-repeat="w in $ctrl.config.items track by w.id">{{w.title}}</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td ng-repeat="w in $ctrl.config.items track by w.id" ng-switch="w.type" data-path="{{w.id}}" class="form-group mgComponent" ng-class="[w.mgValidation == \'error\' ? \'has-error\' : \'\', w.rowClass]">\n\t\t\t\t\t\t\t\t\t'+_.map($macgyver.widgets,function(w){return'<div ng-switch-when="'.concat(w.id,'">').concat(w.template,"</div>")}).join("\n")+'\n\t\t\t\t\t\t\t\t\t<div ng-switch-default class="alert alert-danger">Unknown MacGyver widget type : "{{w.type}}"</div>\n\t\t\t\t\t\t\t\t\t<div class="help-block" ng-if="w.help">{{w.help}}</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t\t<div ng-switch-default>\n\t\t\t\t\t<div ng-click="$ctrl.widgetAddChild()" ng-if="$ctrl.isEditing && !$ctrl.config.items.length" class="text-center">\n\t\t\t\t\t\t<mg-form-editor-inserter config="$ctrl.config" data="$ctrl.data"></mg-form-editor-inserter>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div ng-repeat="w in $ctrl.config.items track by w.id" ng-switch="w.type" data-path="{{w.id}}" class="form-group row mgComponent" ng-class="[w.mgValidation == \'error\' ? \'has-error\' : \'\', w.rowClass]">\n\t\t\t\t\t\t<label ng-if="w.showTitle || w.showTitle===undefined" class="control-label text-left" ng-class="!(w.type==\'mgLabel\' || w.type==\'mgHtml\') || ($ctrl.data[w.id] || w.text) ? \'col-sm-3\' : \'col-sm-12\'">{{w.title}}</label>\n\t\t\t\t\t\t<div ng-if="!(w.type==\'mgLabel\' || w.type==\'mgHtml\') || ($ctrl.data[w.id] || w.text)" ng-class="w.showTitle || w.showTitle===undefined ? \'col-sm-9\' : \'col-sm-12\'">\n\t\t\t\t\t\t\t'+_.map($macgyver.widgets,function(w){return'<div ng-switch-when="'.concat(w.id,'">').concat(w.template,"</div>")}).join("\n")+'\n\t\t\t\t\t\t\t<div ng-switch-default class="alert alert-danger">Unknown MacGyver widget type : "{{w.type}}"</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="help-block" ng-if="w.help" ng-class="w.showTitle || w.showTitle===undefined ? \'col-sm-9 col-sm-offset-3\' : \'col-sm-12\'">{{w.help}}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t'}]}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgDate",{title:"Date selection",icon:"fa fa-calendar",category:"Simple Inputs",config:{min:{type:"mgDate",title:"Earliest date"},max:{type:"mgDate",title:"Latest date"},required:{type:"mgToggle",default:!1}},format:function(v){if(!v)return"";var d=v instanceof Date?v:new Date(v);return console.log("mgDate SHOULD BE DATE",d),d.getDate()+"/"+(d.getMonth()+1)+"/"+d.getFullYear()},formatAlign:"center"})}]).component("mgDate",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.validate=function(){return[$ctrl.config.required&&!$ctrl.data&&"".concat($ctrl.config.title," is required"),$ctrl.config.min&&_.isString($ctrl.data)&&$ctrl.data<$ctrl.config.min&&"".concat($ctrl.config.title," is too early (earliest date is ").concat($ctrl.config.min,")"),$ctrl.config.max&&_.isString($ctrl.data)&&$ctrl.data>$ctrl.config.max&&"".concat($ctrl.config.title," is too late (latest date is ").concat($ctrl.config.max,")")]},$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<input ng-model="$ctrl.data" type="date" class="form-control"/>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgEmail",{title:"Email address",icon:"fa fa-envelope-o",category:"Simple Inputs",config:{placeholder:{type:"mgText",help:"Ghost text to display when the text box has no value"},required:{type:"mgToggle",default:!1}},format:function(v){return v?'<a href="mailto:'.concat(v,'">').concat(v,"</a>"):""}})}]).component("mgEmail",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.validate=function(){return[$ctrl.config.required&&!$ctrl.data&&"".concat($ctrl.config.title," is required")]},$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<input ng-model="$ctrl.data" type="email" class="form-control" placeholder="{{$ctrl.config.placeholder}}"/>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgFileList",{title:"File list",icon:"fa fa-files-o",category:"Files and uploads",config:{allowDelete:{type:"mgToggle",default:!0},listMode:{type:"mgChoiceButtons",enum:["list","thumbnails"],default:"list"}}})}]).component("mgFileList",{bindings:{config:"<",data:"="},controller:["$element","$http","$macgyver","$scope","$timeout",function($element,$http,$macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.thumbnailAble=["png","jpg","jpeg","gif","webm","svg"],$ctrl.urls={},$ctrl.getUrl=function(type,context){if(_.isString($ctrl.urls[type]))return $ctrl.urls[type];if(_.isFunction($ctrl.urls[type]))return $ctrl.urls[type](Object.assign({},{type:type,widget:"mgFileList",path:$macgyver.getPath($scope)},context));throw new Error("Unknown URL type: "+type)},$ctrl.$onInit=function(){$ctrl.urls.query=$ctrl.config.urlQuery||$macgyver.settings.urlResolver||"/api/widgets",$ctrl.urls.delete=$ctrl.config.urlDelete||$macgyver.settings.urlResolver||function(o){return"/api/widgets/".concat(o.path)},$ctrl.refresh()},$ctrl.refresh=function(){_.isEmpty($ctrl.data)?$http.get($ctrl.getUrl("query")).then(function(data){return $ctrl.data=data.data.map(function(file){return _.isString(file.thumbnail)||(file.thumbnail=$ctrl.thumbnailAble.includes(file.ext)),file})}):$ctrl.data=$ctrl.data},$scope.$on("mg.refreshUploads",function(){return $ctrl.refresh()}),$ctrl.delete=function(file){return $http.delete($ctrl.getUrl("delete",{file:file.name})).then($ctrl.refresh,$ctrl.refresh).then(function(){_.isFunction($ctrl.config.onDelete)&&$ctrl.config.onDelete(file)})}}],template:'\n\t\t\t<ul ng-if="!$ctrl.config.listMode || $ctrl.config.listMode == \'list\'" class="list-group">\n\t\t\t\t<a ng-repeat="file in $ctrl.data track by file.name" class="list-group-item" href="{{file.url}}" target="_blank">\n\t\t\t\t\t<span class="badge">{{file.size | filesize}}</span>\n\t\t\t\t\t<button ng-if="$ctrl.config.allowDelete === undefined || $ctrl.config.allowDelete" ng-click="$ctrl.delete(file); $event.preventDefault()" type="button" class="btn btn-danger btn-sm visible-parent-hover pull-right m-t--5 m-r-5"><i class="fa fa-trash"></i></button>\n\t\t\t\t\t<i ng-class="file.icon"></i>\n\t\t\t\t\t{{file.name}}\n\t\t\t\t</a>\n\t\t\t\t<li ng-repeat="file in $ctrl.uploading" class="list-group-item">\n\t\t\t\t\t<i class="fa fa-spinner fa-spin"></i>\n\t\t\t\t\t{{file.name}}\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t<div ng-if="$ctrl.config.listMode == \'thumbnails\'" class="row" style="display:flex; flex-wrap: wrap">\n\t\t\t\t<div ng-repeat="file in $ctrl.data track by file.name" class="col-xs-6 col-md-3 m-b-10 visible-parent-hover-target">\n\t\t\t\t\t<a class="thumbnail" href="{{file.url}}" target="_blank" style="height: 100%; display: flex; align-items: center; justify-content: center">\n\t\t\t\t\t\t<img ng-if="file.thumbnail" src="{{file.url}}"/>\n\t\t\t\t\t\t<div ng-if="!file.thumbnail" class="text-center"><i ng-class="file.icon" class="fa-5x"></i></div>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a ng-if="$ctrl.config.allowDelete === undefined || $ctrl.config.allowDelete" ng-click="$ctrl.delete(file)" class="btn btn-circle btn-danger visible-parent-hover" style="position: absolute; bottom: 15px; right: 20px">\n\t\t\t\t\t\t<i class="fa fa-fw fa-lg fa-trash"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgFileUpload",{title:"File upload",icon:"fa fa-file-o",category:"Files and uploads",config:{icon:{type:"mgText",default:"fa fa-file-text"},placeholder:{type:"mgText",default:"Upload file...",help:"Ghost text to display when no file is present"},allowDelete:{type:"mgToggle",default:!0},showList:{type:"mgToggle",default:!0,help:"Show a list of files already uploaded"},listMode:{type:"mgChoiceButtons",enum:["list","thumbnails"],default:"list"},showUploading:{type:"mgToggle",default:!0}}})}]).component("mgFileUpload",{bindings:{config:"<",data:"=?"},controller:["$element","$http","$macgyver","$scope","$timeout",function($element,$http,$macgyver,$scope,$timeout){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.urls={},$ctrl.getUrl=function(type,context){if(_.isString($ctrl.urls[type]))return url[type];if(_.isFunction($ctrl.urls[type]))return $ctrl.urls[type](Object.assign({},{type:type,widget:"mgFileUpload",path:$macgyver.getPath($scope)},context));throw new Error("Unknown URL type: "+type)},$ctrl.$onInit=function(){$ctrl.urls.upload=$ctrl.config.urlUpload||$macgyver.settings.urlResolver||function(o){return"/api/widgets/".concat(o.path)},$ctrl.listConfig=angular.extend({},$ctrl.config,{mgPath:$macgyver.getPath($scope)})},$ctrl.selectedFile,$ctrl.uploading=[],$ctrl.click=function(){return $element.find("input[type=file]").trigger("click")},$element.find("input[type=file]").on("change",function(){var _this=this;$timeout(function(){var filename=$(_this).val().replace(/\\/g,"/").replace(/.*\//,""),formData=new FormData;formData.append("file",_this.files[0]),$ctrl.uploading.push({name:filename,$promise:$http.post($ctrl.getUrl("upload",{file:filename}),formData,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).then(function(){$ctrl.uploading=$ctrl.uploading.filter(function(i){return i.name!=filename}),_.isFunction($ctrl.config.onUpload)&&$ctrl.config.onUpload(),$macgyver.broadcast($scope,"mg.refreshUploads")})})})})}],template:'\n\t\t\t<a ng-click="$ctrl.click()" class="btn btn-primary hidden-print" style="margin-bottom:10px">\n\t\t\t\t<i ng-class="$ctrl.icon || \'fa fa-file\'"></i>\n\t\t\t\t{{$ctrl.selectedFile || $ctrl.placeholder || \'Upload file...\'}}\n\t\t\t</a>\n\t\t\t<div ng-if="$ctrl.config.showList === undefined || $ctrl.config.showList">\n\t\t\t\t<mg-file-list config="$ctrl.listConfig" data="$ctrl.data"></mg-file-list>\n\t\t\t</div>\n\t\t\t<ul ng-if="$ctrl.config.showUploading === undefined || $ctrl.config.showUploading" class="list-group">\n\t\t\t\t<li ng-repeat="file in $ctrl.uploading" class="list-group-item">\n\t\t\t\t\t<i class="fa fa-spinner fa-spin"></i>\n\t\t\t\t\t{{file.name}}\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t<div style="display: none"><input type="file" name="file"/></div>\n\t\t'}),angular.module("macgyver").component("mgForm",{bindings:{config:"<",data:"="},controller:["$macgyver","$q","$scope",function($macgyver,$q,$scope){var $ctrl=this;$ctrl.errors,$scope.$on("mg.getForm",function(e,f){f.$ctrl=$ctrl,f.$scope=$scope}),$ctrl.validate=function(){return $q(function(resolve,reject){$q.all(_($macgyver.getAll($scope)).pickBy(function(c,k){return _.isFunction(c.validate)}).mapValues(function(c,k){return c.validate()}).value()).then(function(res){var errs=_.reduce(res,function(errs,err,id){return err&&(_.isArray(err)?err.filter(function(e){return!!e}).forEach(function(e){return errs.push({id:id,err:e})}):_.isString(err)?errs.push({id:id,err:err}):!1===v&&errs.push({id:id,err:"is not valid"})),errs},[]);_.forEach($macgyver.getAll($scope),function(component,id){return component.config.mgValidation=errs.some(function(e){return e.id==id})?"error":"success"}),_.isEmpty(errs)?($ctrl.errors=void 0,resolve()):($ctrl.errors=errs,reject(errs))}).catch(function(e){return reject(e)})})},$scope.$watch("$ctrl.config",function(){$ctrl.config&&!_.isEmpty($ctrl.config)&&($ctrl.config=$macgyver.neatenSpec($ctrl.config))}),$scope.$watchGroup(["$ctrl.config","$ctrl.data"],function(){$ctrl.config&&!_.isEmpty($ctrl.config)&&angular.merge($ctrl.data,$macgyver.specDataPrototype($ctrl.config))})}],template:'\n\t\t\t<form submit="$ctrl.submit" class="form-horizontal">\n\t\t\t\t<div ng-show="$ctrl.errors" class="alert alert-warning animate fadeInDown">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li ng-repeat="err in $ctrl.errors">{{err.err}}</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\n\t\t\t\t<mg-container config="$ctrl.config" data="$ctrl.data"></mg-container>\n\t\t\t</form>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgGrid",{title:"Grid layout",icon:"fa fa-dropbox",category:"Layout",isContainer:!0,config:{rows:{type:"mgNumber",default:1,min:1,max:100},cols:{type:"mgNumber",default:1,min:1,max:100},style:{type:"mgChoiceDropdown",title:"Grid style",help:"How to style the grid",default:"table-bordered",enum:[{id:"",title:"Bordered",class:"table-bordered"},{id:"mgTableBorderless",title:"Borderless",class:"table-borderless"},{id:"mgTableCondensed",title:"Condensed",class:"table-condensed"}]},styleCompact:{type:"mgToggle",title:"Compact forms",default:!1},styleDarker:{type:"mgToggle",title:"Darker borders",default:!1},styleHover:{type:"mgToggle",title:"Hover rows",default:!0},styleStriped:{type:"mgToggle",title:"Striped rows",default:!0}}})}]).component("mgGrid",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.$onInit=function(){$ctrl.config.items||($ctrl.config.items=[]),$ctrl.config.rows||($ctrl.config.rows=$ctrl.config.items.length),$ctrl.config.cols||($ctrl.config.cols=Math.max.apply(Math,_toConsumableArray($ctrl.config.items.map(function(i){return i.items.length}))))},$scope.$watchGroup(["$ctrl.config.rows","$ctrl.config.cols"],function(){_.has($ctrl,"config.rows")&&($ctrl.config.rows<$ctrl.config.items.length?$ctrl.config.items=$ctrl.config.items.slice(0,$ctrl.config.rows):$ctrl.config.rows>$ctrl.config.items.length&&_.range($ctrl.config.items.length,$ctrl.config.rows).forEach(function(i){$ctrl.config.items.push({id:$ctrl.config.id+"-row-"+i,type:"mgGridRow",items:[]})})),_.has($ctrl,"config.cols")&&$ctrl.config.items.forEach(function(row,r){row.items.length<$ctrl.config.cols?_.range(row.items.length,$ctrl.config.cols).forEach(function(c){row.items.push({id:$ctrl.config.id+"-row-"+r+"-col-"+c,type:"mgContainer",items:[]})}):row.items.length>$ctrl.config.cols&&(row.items=row.items.slice(0,$ctrl.config.cols))})})}],template:["$macgyver",function(){return'\n\t\t\t<table class="table" ng-class="[\n\t\t\t\t$ctrl.config.style ? $ctrl.config.style : \'table-bordered\',\n\t\t\t\t$ctrl.config.styleHover ? \'table-hover\' : undefined,\n\t\t\t\t$ctrl.config.styleStriped ? \'table-striped\' : undefined,\n\t\t\t\t$ctrl.config.styleCompact ? \'table-compact\' : undefined,\n\t\t\t\t$ctrl.config.styleDarker ? \'table-darker\' : undefined\n\t\t\t]">\n\t\t\t\t<tr ng-repeat="row in $ctrl.config.items">\n\t\t\t\t\t<td ng-repeat="w in row.items" ng-switch="w.type">\n\t\t\t\t\t\t<mg-container ng-if="w.type==\'mgContainer\'" data="$ctrl.data[w.id]" config="w"></mg-container>\n\t\t\t\t\t\t<div ng-if="w.type!=\'mgContainer\'" class="alert alert-danger">Child cell elements within a mgGrid must always be an mgContainer</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t'}]}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgGridRow",{title:"Grid row layout",icon:"fa fa-dropbox",category:"Layout",isContainer:!0,userPlaceable:!1,config:{}})}]).component("mgGridRow",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){$macgyver.inject($scope,this)}]}),angular.module("macgyver").component("mgFormEditor",{template:'\n\t\t\t\x3c!-- Widget Add modal {{{ --\x3e\n\t\t\t<div id="modal-mgFormEditor-add" class="modal fade">\n\t\t\t\t<div ng-if="$ctrl.isCreating" class="modal-dialog" style="width: 50%">\n\t\t\t\t\t<div class="modal-content">\n\t\t\t\t\t\t<div class="modal-header">\n\t\t\t\t\t\t\t<a class="close" data-dismiss="modal"><i class="fa fa-times"></i></a>\n\t\t\t\t\t\t\t<h4 class="modal-title">Add Widget</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="modal-body">\n\t\t\t\t\t\t\t<div class="row">\n\t\t\t\t\t\t\t\t<div class="col-md-3">\n\t\t\t\t\t\t\t\t\t<ul class="nav nav-pills nav-stacked">\n\t\t\t\t\t\t\t\t\t\t<li ng-class="!$ctrl.category && \'active\'" ng-click="$ctrl.category = false" class="text-ellipsis text-nowrap">\n\t\t\t\t\t\t\t\t\t\t\t<a>\n\t\t\t\t\t\t\t\t\t\t\t\t<i class="fa fa-fw fa-asterisk"></i>\n\t\t\t\t\t\t\t\t\t\t\t\tAll widgets\n\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t<li ng-repeat="cat in $ctrl.categories" ng-class="cat == $ctrl.category && \'active\'" ng-click="$ctrl.category = cat"  class="text-ellipsis text-nowrap">\n\t\t\t\t\t\t\t\t\t\t\t<a>\n\t\t\t\t\t\t\t\t\t\t\t\t<i class="fa fa-fw fa-circle"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t{{cat}}\n\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class="col-md-9">\n\t\t\t\t\t\t\t\t\t<a ng-click="$ctrl.widgetAddSubmit({type: widget.id})" ng-repeat="widget in $ctrl.$macgyver.widgets | mgFilterObject:$ctrl.widgetFilter track by widget.id" class="col-md-4 widget-item">\n\t\t\t\t\t\t\t\t\t\t<div class="btn btn-default btn-xlg btn-block text-center">\n\t\t\t\t\t\t\t\t\t\t\t<div><i ng-class="widget.icon" class="fa-4x"></i></div>\n\t\t\t\t\t\t\t\t\t\t\t<div class="p-t-5 text-ellipsis">{{widget.title}}</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t\x3c!-- }}} --\x3e\n\t\t\t\n\t\t\t\x3c!-- Widget Edit modal {{{ --\x3e\n\t\t\t<div id="modal-mgFormEditor-edit" class="modal">\n\t\t\t\t<div class="modal-dialog pull-right">\n\t\t\t\t\t<div class="modal-content">\n\t\t\t\t\t\t<div class="modal-header">\n\t\t\t\t\t\t\t<h4 class="modal-title">Edit Widget {{$ctrl.widgetName}}</h4>\n\t\t\t\t\t\t\t<a class="close" data-dismiss="modal"><i class="fa fa-times"></i></a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="modal-body form-horizontal">\n\t\t\t\t\t\t\t<mg-form config="$ctrl.selectedWidgetForm" data="$ctrl.selectedWidgetData"></mg-form>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="modal-footer">\n\t\t\t\t\t\t\t<div class="pull-left">\n\t\t\t\t\t\t\t\t<a ng-click="$ctrl.widgetDelete()" type="button" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-trash"></i> Delete</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="pull-right">\n\t\t\t\t\t\t\t\t<a type="button" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-check"></i> Save &amp; Close</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t\x3c!-- }}} --\x3e\n\t\t\t\n\t\t\t\x3c!-- Form editing hover mask {{{ --\x3e\n\t\t\t<div class="mgFormEditor-mask">\n\t\t\t\t<div class="mgFormEditor-mask-background"></div>\n\t\t\t\t<div class="mgFormEditor-mask-buttons btn-group">\n\t\t\t\t\t<div ng-if="!$ctrl.isInserter" class="mgFormEditor-mask-buttons-left">\n\t\t\t\t\t\t<a ng-repeat="button in $ctrl.verbs.buttonsLeft" ng-click="$ctrl.verbAction(button)" ng-class="button.class">\n\t\t\t\t\t\t\t<i ng-class="button.icon"></i>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div ng-if="!$ctrl.isInserter" class="mgFormEditor-mask-buttons-right">\n\t\t\t\t\t\t<div class="btn-group">\n\t\t\t\t\t\t\t<a ng-repeat="button in $ctrl.verbs.buttonsRight" ng-click="$ctrl.verbAction(button)" ng-class="button.class">\n\t\t\t\t\t\t\t\t<i ng-class="button.icon"></i>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<a ng-if="$ctrl.selectedWidget" class="btn btn-default dropdown-toggle" data-toggle="dropdown"><i class="fa fa-fw fa-ellipsis-h"></i></a>\n\t\t\t\t\t\t\t<ul class="dropdown-menu pull-right">\n\t\t\t\t\t\t\t\t<li ng-repeat="verb in $ctrl.verbs.dropdown" ng-class="verb.title == \'-\' ? \'divider\' : \'\'">\n\t\t\t\t\t\t\t\t\t<a ng-if="verb.title != \'-\'" ng-click="$ctrl.verbAction(verb)">\n\t\t\t\t\t\t\t\t\t\t<i ng-class="verb.icon"></i>\n\t\t\t\t\t\t\t\t\t\t{{verb.title}}\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t\x3c!-- }}} --\x3e\n\t\t\t\n\t\t\t<mg-form config="$ctrl.config" data="$ctrl.data"></mg-form>\n\t\t\t\n\t\t',bindings:{config:"<",data:"="},controller:["$element","$macgyver","$q","$scope","$timeout","dragularService","TreeTools",function($element,$macgyver,$q,$scope,$timeout,dragularService,TreeTools){var $ctrl=this;$ctrl.$macgyver=$macgyver,$ctrl.isCreating=!1,$ctrl.categories=_($macgyver.widgets).filter(function(w){return w.userPlaceable}).map("category").sort().uniq().value(),$ctrl.category=$ctrl.categories.find(function(c){return"Simple Inputs"==c}),$ctrl.widgetAddDetails={},$ctrl.widgetPaste=function(widget,verb){var node=widget||TreeTools.find($ctrl.config,{id:$ctrl.selectedWidget.id},{childNode:"items"});if(node)return navigator.clipboard.readText().then(function(content){if(content){var layout;switch(verb){case"JSON":layout=_(JSON.parse(content)).flatten().value();break;case"TSV":default:if(-1===content.indexOf("\t"))throw new Error("Not implemented");if(!node.cols||node.cols<0)return alert("Number of cols must be set to paste tables.");var bytab=_(content).split("\t"),reordered=[];bytab.forEach(function(c,i){(reordered.length+1)%node.cols==0?(reordered.push(c.substr(0,c.indexOf("\n"))),reordered.push(c.substr(c.indexOf("\n")+1))):reordered.push(c)}),layout=_(reordered).chunk(node.cols).value()}node.items=layout.map(function(row,rowi){if(row&&row.length===node.cols){var cols=row.map(function(col){return col?{type:"mgContainer",items:[{type:0===rowi?"mgHeading":"mgHtml",showTitle:!1,rowClass:"",title:"",text:col}]}:{type:"mgContainer",items:[]}});return node.cols=Math.max(node.cols,cols.length),{type:"mgGridRow",items:cols}}}),node.items=node.items.filter(function(n){return void 0!==n}),node.rows=node.items.length,$macgyver.forEach(node,function(w){w.text&&(w.text=w.text.replace("<cell>","").replace("</cell>","").replace(new RegExp("\r","g"),"").replace(new RegExp("\n","g"),"<br>").replace(new RegExp("\t","g"),"&nbsp;&nbsp;&nbsp;&nbsp;"))})}})},$ctrl.widgetDuplicateCell=function(widget){var node=widget||TreeTools.find($ctrl.config,{id:$ctrl.selectedWidget.id},{childNode:"items"});if(node){var parents=TreeTools.parents($ctrl.config,{id:node.id},{childNode:"items"}),types=parents.map(function(p){return p.type}),grid_idx=types.lastIndexOf("mgGrid"),row_idx=types.lastIndexOf("mgGridRow"),container_idx=types.lastIndexOf("mgContainer"),grid_row=parents[grid_idx].items.indexOf(parents[row_idx]),grid_cell=parents[grid_idx].items[grid_row].items.indexOf(parents[container_idx]),duplicate=Object.assign({},parents[container_idx]);delete duplicate.id,duplicate.items=duplicate.items.map(function(i){return delete i.id,i});for(var i=grid_row+1;i<parents[grid_idx].items.length;i++)parents[grid_idx].items[i].items[grid_cell]=duplicate}},$ctrl.widgetAdd=function(){var node,direction=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"below",widget=1<arguments.length?arguments[1]:void 0;if(node=_.isString(widget)?TreeTools.find($ctrl.config,{id:widget},{childNode:"items"}):_.isObject(widget)?widget:TreeTools.find($ctrl.config,{id:$ctrl.selectedWidget.id},{childNode:"items"}))return $ctrl.widgetAddDetails={id:node.id,direction:direction},$q.resolve().then(function(){return $ctrl.locks.add(["maskMove","contextMenu","edit"],"widgetAdd")}).then(function(){return $ctrl.isCreating=!0}).then(function(){return $ctrl.modal.show("modal-mgFormEditor-add")}).then(function(){return $ctrl.isCreating=!1}).then(function(){return $ctrl.locks.remove(["maskMove","contextMenu","edit"],"widgetAdd")})},$scope.$on("mg.mgFormEditor.widgetAdd",function(e,direction,widget){return $ctrl.widgetAdd(direction,widget)}),$ctrl.widgetAddSubmit=function(props){angular.merge($ctrl.widgetAddDetails,props);var node=TreeTools.find($ctrl.config,{id:$ctrl.widgetAddDetails.id},{childNode:"items"});if(!node)return console.error("Asked to create a widget around non-existant ID",$ctrl.widgetAddDetails);var nodeParent=TreeTools.parents($ctrl.config,{id:$ctrl.widgetAddDetails.id},{childNode:"items"}).slice(-2).slice(0,1)[0],nodeIndex=nodeParent.items.findIndex(function(i){return i.id==node.id}),prototypeWidget={type:$ctrl.widgetAddDetails.type,title:$macgyver.widgets[$ctrl.widgetAddDetails.type].title};switch($ctrl.widgetAddDetails.direction){case"above":var insertedIndex=nodeIndex-1<0?0:nodeIndex-1;nodeParent.items.splice(insertedIndex,0,prototypeWidget),$ctrl.modal.hide().then(function(){return $ctrl.widgetEdit(nodeParent.items[insertedIndex])});break;case"below":insertedIndex=nodeIndex+1;nodeParent.items.splice(insertedIndex,0,prototypeWidget),$ctrl.modal.hide().then(function(){return $ctrl.widgetEdit(nodeParent.items[insertedIndex])});break;case"inside":node.items.push(prototypeWidget),$ctrl.modal.hide().then(function(){return $ctrl.widgetEdit(node.items[node.items.length-1])})}$scope.$broadcast("mg.mgFormEditor.change"),$scope.$emit("mg.mgFormEditor.added")},$ctrl.widgetFilter=function(widget){return widget.userPlaceable&&(!$ctrl.category||widget.category==$ctrl.category)},$ctrl.isInserter,$ctrl.insertPosition,$ctrl.selectedWidget,$ctrl.selectedWidgetData,$ctrl.selectedWidgetForm,$ctrl.widgetName,$ctrl.widgetEdit=function(widget){return $q(function(resolve,reject){var node;if(_.isObject(widget))node=widget;else{if(!$ctrl.selectedWidget)return reject("No widget selected to edit");node=TreeTools.find($ctrl.config,{id:$ctrl.selectedWidget.id},{childNode:"items"})}return node.type&&"string"==typeof node.type&&($ctrl.widgetName=" - "+node.type.replace(/^mg/i,"").replace(/([A-Z])/g," $1").trim()),$ctrl.selectedWidgetData=node,$ctrl.selectedWidgetForm={type:"mgContainer",items:[{id:"globalConfig",type:"mgContainer",ignoreScope:!0,showTitle:!1,items:[{id:"id",type:"mgText",title:"ID"}]},{id:"sepGlobal",type:"mgSeperator",showTitle:!1},{id:"typeConfig",type:"mgContainer",ignoreScope:!0,showTitle:!1,items:_($macgyver.widgets[$ctrl.selectedWidgetData.type].config).map(function(v,k){return v.id=k,v.title||(v.title=_.startCase(k)),v}).filter(function(i){return _.isUndefined(i.editable)?"items"!=i.id:i.editable}).value()},{id:"parentConfig",type:"mgContainer",ignoreScope:!0,showTitle:!1,items:_(_(TreeTools.parents($ctrl.config,node,{childNode:"items"})).slice(0,-1).reverse().map(function(p){return _.get($macgyver,["widgets",p.type,"configChildren"])}).filter().reduce(function(obj,p){return _.assign(obj,p)},{})).map(function(p,k){return p.id=k,p.title||(p.title=_.startCase(k)),p}).value()}].filter(function(widget){return"mgContainer"!=widget.type||0<widget.items.length})},$q.resolve().then(function(){return $ctrl.locks.add(["maskMove","contextMenu","edit"],"widgetEdit")}).then(function(){return $macgyver.widgets[node.type]&&!$macgyver.widgets[node.type].nonEditableWidget&&$ctrl.modal.show("modal-mgFormEditor-edit")}).then(function(){return $ctrl.locks.remove(["maskMove","contextMenu","edit"],"widgetEdit")})})},$ctrl.widgetToggle=function(prop,startValue){var node=TreeTools.find($ctrl.config,{id:$ctrl.selectedWidget.id},{childNode:"items"});node&&(_.has(node,prop)?node[prop]=!node[prop]:node[prop]=!startValue)},$ctrl.widgetDelete=function(widget){var node=widget||TreeTools.find($ctrl.config,{id:$ctrl.selectedWidget.id},{childNode:"items"});if(node){var nodeParent=TreeTools.parents($ctrl.config,{id:node.id},{childNode:"items"}).slice(-2).slice(0,1)[0];if(!nodeParent)throw new Error("Cannot find widget parent for ID: "+node.id);var nodeIndex=nodeParent.items.findIndex(function(i){return i.id==node.id});nodeParent.items.splice(nodeIndex,1)}},$element.on("mousemove",function(event){return $scope.$apply(function(){if(!$ctrl.locks.check("maskMove")){var mouse_left=event.clientX,mouse_top=event.clientY,matching=angular.element(".mgComponent, .mgComponentEditorInserter").toArray().map(function(i){var rect=i.getBoundingClientRect();return{rect:rect,area:rect.width*rect.height,el:i}}).filter(function(i){return i.rect.left<=mouse_left&&i.rect.top<=mouse_top&&i.rect.right>=mouse_left&&i.rect.bottom>=mouse_top}).sort(function(a,b){return a.area==b.area?0:a.area<b.area?-1:1})[0];if(matching){var widget=TreeTools.find($ctrl.config,{id:angular.element(matching.el).attr("data-path")},{childNode:"items"});if(widget&&$macgyver.widgets[widget.type].skipMask)return}matching?($ctrl.isInserter=angular.element(matching.el).hasClass("mgComponentEditorInserter"),$element.children(".mgFormEditor-mask").removeClass("mgFormEditor-mask-editor mgFormEditor-mask-inserter").addClass($ctrl.isInserter?"mgFormEditor-mask-inserter":"mgFormEditor-mask-editor").css({left:matching.rect.left+_.get($macgyver.settings,"mgFormEditor.maskPosition.left",0),top:matching.rect.top+_.get($macgyver.settings,"mgFormEditor.maskPosition.top",0),width:matching.rect.width+_.get($macgyver.settings,"mgFormEditor.maskPosition.width",0),height:matching.rect.height+_.get($macgyver.settings,"mgFormEditor.maskPosition.height",0),display:"block"}),$ctrl.isInserter?($ctrl.selectedWidget=void 0,$ctrl.insertPosition=angular.element(matching.el)):($ctrl.selectedWidget=TreeTools.find($ctrl.config,{id:angular.element(matching.el).attr("data-path")},{childNode:"items"}),$ctrl.insertPosition=void 0)):$ctrl.selectedWidget=null}})}),!1!==_.get($macgyver.settings,"mgFormEditor.scroller")&&(angular.element(_.get($macgyver.settings,"mgFormEditor.scroller")||document).on("scroll",function(){$element.children(".mgFormEditor-mask").css("display","none"),$scope.$apply(function(){return $ctrl.selectedWidget=null})}),_.has($macgyver.settings,"mgFormEditor.scroller")&&$element.children(".mgFormEditor-mask")[0].addEventListener("wheel",function(){$element.children(".mgFormEditor-mask").css("display","none"),$scope.$apply(function(){return $ctrl.selectedWidget=null})})),$element.on("show.bs.dropdown",function(){$scope.$apply(function(){return $ctrl.locks.add(["maskMove","edit"],"dropdown")})}),$element.on("hide.bs.dropdown",function(){$scope.$apply(function(){return $ctrl.locks.remove(["maskMove","edit"],"dropdown")})}),$element.on("mousedown",function(event){angular.element(event.target).closest("a").length||angular.element(this).closest(".modal").length||(!$ctrl.locks.check("edit")&&$ctrl.selectedWidget&&0==event.button?(event.stopPropagation(),$scope.$apply(function(){return $ctrl.widgetEdit()})):$ctrl.isInserter&&0==event.button&&$ctrl.insertPosition.trigger("click"))}),$element.on("contextmenu",function(event){$ctrl.locks.check("contextMenu")&&(event.stopPropagation(),event.preventDefault(),$ctrl.selectedWidget&&$element.find(".mgFormEditor-mask > .mgFormEditor-mask-buttons .dropdown-toggle").dropdown("toggle"))}),$ctrl.recalculateIds=function(){var exists=[];$macgyver.forEach($ctrl.config,function(w){if(Object.prototype.hasOwnProperty.call(w,"id")){if(-1===exists.indexOf(w.id))return exists.push(w.id);console.log("Duplicate detected",w.id),delete w.id}}),$macgyver.forEach($ctrl.config,function(w){if(!Object.prototype.hasOwnProperty.call(w,"id")){for(var tryIndex=1,tryName=w.type;TreeTools.find($ctrl.config,{id:tryName},{childNode:"items"});)tryName=w.type+ ++tryIndex;w.id=tryName}})},$scope.$watch("$ctrl.config",function(){return $ctrl.recalculateIds()},!0),$ctrl.verbs={dropdown:[],buttonsLeft:[],buttonsRight:[]},$ctrl.recalculateVerbs=function(){Object.assign($ctrl.verbs,_.mapValues($ctrl.verbs,function(junk,verbArea){return $macgyver.settings.mgFormEditor.verbs[verbArea].filter(function(verb){return(!verb.selectedWidgetOnly||verb.selectedWidgetOnly&&$ctrl.selectedWidget)&&(!verb.show||verb.show($ctrl.selectedWidget,$ctrl.config))}).map(function(verb){return _.mapValues(verb,function(v,k){return _.isFunction(v)&&"action"!=k?v($ctrl.selectedWidget):v})})}))},$scope.$watchGroup(["$ctrl.$macgyver.settings.mgFormEditor.verbs","$ctrl.selectedWidget.id"],function(){return $ctrl.recalculateVerbs()}),$ctrl.verbAction=function(verb){if(angular.isFunction(verb.action))verb.action($ctrl.selectedWidget,verb);else{var action=_.isObject(verb)&&verb.action?verb.action:verb;switch(action){case"add":$ctrl.widgetAdd();break;case"edit":$ctrl.widgetEdit();break;case"delete":$ctrl.widgetDelete();break;case"pasteTsv":$ctrl.widgetPaste($ctrl.selectedWidget,"TSV");break;case"pasteJson":$ctrl.widgetPaste($ctrl.selectedWidget,"JSON");break;case"duplicateCell":$ctrl.widgetDuplicateCell();break;case"dropdown":$element.find(".mgFormEditor-mask-buttons .dropdown-toggle").attr("data-toggle","dropdown").dropdown(),console.log("DD DONE");break;default:throw new Error('Unknown or unsupported verb action: "'.concat(action,'"'))}}$ctrl.recalculateVerbs()},$scope.$watchCollection("$ctrl.config.items",function(){return $timeout(function(){$ctrl.drake&&$ctrl.drake.remove();try{$ctrl.drake=dragularService("mg-container",{classes:{mirror:"gu-mirror form-horizontal"},scope:$scope,direction:"vertical",lockY:!0})}catch(e){}})}),$scope.$on("dragulardrop",function(e,el,targetContainer,sourceContainer,conModel,elIndex,targetModel,dropIndex){var parents=TreeTools.parents($ctrl.config,{id:$ctrl.selectedWidget.id},{childNode:"items"}),parent=parents[parents.length-2];parent.items=_(parent.items).map(function(i,idx,items){return idx==dropIndex?[items[elIndex],i]:idx==elIndex?void 0:i}).filter().flatten().value()}),$ctrl.$onInit=function(){_.defaults($macgyver.settings.mgFormEditor,{maskVerbs:[{action:"toggleTitle",class:"btn btn-default btn-sm",icon:"fa fa-fw fa-arrows-h",tooltip:"Toggle the title visibility of this element"},{action:"delete",class:"btn btn-danger btn-sm",icon:"fa fa-fw fa-trash",tooltip:"Delete this widget"}]})},$ctrl.modal={show:function(id){return $q(function(resolve){var query="#"+id;if(angular.element(query).is(":visible").length)return resolve();$ctrl.modal.hide().then(function(){angular.element(query).one("hidden.bs.modal",function(){return resolve()}).modal("show")})})},hide:function(id){return $q(function(resolve){var query=id?"#".concat(id):".modal";if(!angular.element(query).is(":visible"))return resolve();angular.element(query).one("hidden.bs.modal",function(){return resolve()}).modal("hide")})}},$ctrl.locks={_locks:{},add:function(lock,id){_.castArray(lock).forEach(function(l){$ctrl.locks._locks[l]||($ctrl.locks._locks[l]=new Set),_.castArray(id).forEach(function(i){return $ctrl.locks._locks[l].add(i)})})},remove:function(lock,id){return _.castArray(lock).forEach(function(l){$ctrl.locks._locks[l]&&_.castArray(id).forEach(function(i){return $ctrl.locks._locks[l].delete(i)})}),$ctrl},check:function(lock){return $ctrl.locks._locks[lock]&&0<$ctrl.locks._locks[lock].size}}}]}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgFormEditorInserter",{title:"Form Editor - Inserter",userPlaceable:!1,icon:"fa fa-pencil-square-o",category:"Form Editor Inserter",config:{}})}]).component("mgFormEditorInserter",{bindings:{config:"<",data:"="},controller:["$element","$macgyver","$scope",function($element,$macgyver,$scope){(this.$macgyver=$macgyver).inject($scope,this),$element.on("click",function(){return $scope.$apply(function(){})})}],template:'\n\t\t\t<div class="alert alert-success mgComponentEditorInserter">\n\t\t\t\t<div ng-click="$ctrl.widgetAddChild()">\n\t\t\t\t\t<i class="fa fa-plus"></i>\n\t\t\t\t\tAdd widget\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgHeading",{title:"Heading",icon:"fa fa-header",category:"General Decoration",config:{text:{type:"mgText"}}})}]).component("mgHeading",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){$macgyver.inject($scope,this)}],template:'\n\t\t\t<legend class="form-control-static">{{$ctrl.data || $ctrl.config.text}}</legend>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgHtml",{title:"Read-only HTML",icon:"fa fa-html5",category:"General Decoration",config:{text:{type:"mgTextArea",rows:5}}})}]).component("mgHtml",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){$macgyver.inject($scope,this)}],template:'\n\t\t\t<div class="form-control-static" ng-bind-html="$ctrl.data || $ctrl.config.text"></div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgImage",{title:"Image",icon:"fa fa-pencil-square",category:"Files and uploads",config:{title:{type:"mgText",default:"Attach image"},allowDelete:{type:"mgToggle",default:!0},showList:{type:"mgToggle",default:!0,help:"Show a list of images already uploaded"},listMode:{type:"mgChoiceButtons",enum:["list","thumbnails"],default:"thumbnails"}}})}]).component("mgImage",{bindings:{config:"<",data:"="},controller:["$http","$macgyver","$scope",function($http,$macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.urls={},$ctrl.getUrl=function(type,context){if(_.isString($ctrl.urls[type]))return url[type];if(_.isFunction($ctrl.urls[type]))return $ctrl.urls[type](Object.assign({},{type:type,widget:"mgImage",path:$macgyver.getPath($scope)},context));throw new Error("Unknown URL type: "+type)},$ctrl.$onInit=function(){$ctrl.urls.upload=$ctrl.config.urlUpload||$macgyver.settings.urlResolver||function(o){return"/api/widgets/".concat(o.path)},$ctrl.listConfig=angular.extend({listMode:"thumbnails"},$ctrl.config,{mgPath:$macgyver.getPath($scope)})},$ctrl.isUploading=!1,$ctrl.getImage=function(dataURI,blob){var sigBlob=new Blob([blob],{type:"image/png"}),formData=new FormData;formData.append("file",sigBlob),$http.post($ctrl.getUrl("upload",{file:(new Date).toISOString()+".png"}),formData,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).then(function(){$ctrl.isUploading=!1,$macgyver.broadcast($scope,"mg.refreshUploads")}),$ctrl.showModal(!1),$ctrl.isUploading=!0},$ctrl.modalShown=!1,$ctrl.showModal=function(show){show?angular.element("#modal-mgImage-"+$ctrl.config.id).on("shown.bs.modal",function(){return $scope.$apply(function(){return $ctrl.modalShown=!0})}).on("hidden.bs.modal",function(){return $scope.$apply(function(){return $ctrl.modalShown=!1})}).modal("show"):angular.element("#modal-mgImage-"+$ctrl.config.id).modal("hide")}}],template:'\n\t\t\t<div id="modal-mgImage-{{$ctrl.config.id}}" class="modal">\n\t\t\t\t<div class="modal-dialog modal-lg">\n\t\t\t\t\t<div class="modal-content">\n\t\t\t\t\t\t<div class="modal-header">\n\t\t\t\t\t\t\t<h4 class="modal-title">{{$ctrl.config.title || \'Attach image\'}}</h4>\n\t\t\t\t\t\t\t<a class="close" data-dismiss="modal"><i class="fa fa-times"></i></a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="modal-body">\n\t\t\t\t\t\t\t<div ng-if="$ctrl.modalShown">\n\t\t\t\t\t\t\t\t<ui-scribble editable="true" callback="$ctrl.getImage(dataURI, blob)" width="100%" height="600"></ui-scribble>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="modal-footer">\n\t\t\t\t\t\t\t<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div ng-if="$ctrl.config.showList === undefined || $ctrl.config.showList">\n\t\t\t\t<mg-file-list config="$ctrl.listConfig" data="$ctrl.data"></mg-file-list>\n\t\t\t</div>\n\t\t\t<div ng-if="!$ctrl.files || !$ctrl.files.length" class="hidden-print">\n\t\t\t\t<div ng-if="$ctrl.isUploading" class="alert alert-info font-lg">\n\t\t\t\t\t<i class="fa fa-spinner fa-spin"></i>\n\t\t\t\t\tUploading signature...\n\t\t\t\t</div>\n\t\t\t\t<a ng-click="$ctrl.showModal(true)" class="btn btn-success">\n\t\t\t\t\t<i class="fa fa-plus"></i>\n\t\t\t\t\tAdd image\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgLabel",{title:"Read-only label",icon:"fa fa-font",category:"General Decoration",config:{text:{type:"mgText"}}})}]).component("mgLabel",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){$macgyver.inject($scope,this)}],template:'\n\t\t\t<div class="form-control-static">{{$ctrl.data || $ctrl.config.text}}</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgList",{title:"List",icon:"fa fa-list-ol",category:"Simple Inputs",config:{allowDelete:{type:"mgToggle",default:!0},min:{type:"mgNumber",title:"Minimum number of items"},max:{type:"mgNumber",title:"Maximum number of items"},required:{type:"mgToggle",default:!1},numbered:{type:"mgToggle",default:!0},addButtonActiveClass:{type:"mgText",default:"btn btn-block btn-success fa fa-plus",advanced:!0},addButtonInactiveClass:{type:"mgText",default:"btn btn-block btn-disabled fa fa-plus",advanced:!0}},format:function(v){return(v||[]).join(", ")}})}]).component("mgList",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.validate=function(){return[$ctrl.config.required&&(!$ctrl.data||$ctrl.data.length)&&"".concat($ctrl.config.title," is required"),$ctrl.config.min&&$ctrl.data.length<$ctrl.config.min&&"".concat($ctrl.config.title," has too few items (minimum is ").concat($ctrl.config.min,")"),$ctrl.config.max&&$ctrl.data.length>$ctrl.config.max&&"".concat($ctrl.config.title," has too many items (maximum is ").concat($ctrl.config.max,")")]},$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)}),$ctrl.$onInit=function(){return $scope.assignConfig("addButtonActiveClass","addButtonInactiveClass")},$ctrl.listNewItem={text:""},$ctrl.addItem=function(){_.isArray($ctrl.data)||($ctrl.data=[]),$ctrl.data.push($ctrl.listNewItem.text),$ctrl.listNewItem.text=""},$ctrl.removeItem=function(index){$ctrl.data=$ctrl.data.filter(function(x,i){return i!=index})},$ctrl.changeItem=function(index,value){return $ctrl.data[index]=value}}],template:'\n\t\t\t<form ng-submit="$ctrl.addItem()">\n\t\t\t\t<table class="table table-bordered table-hover">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr ng-repeat="row in $ctrl.data track by $index">\n\t\t\t\t\t\t\t<td ng-if="$ctrl.config.numbered == undefined || $ctrl.config.numbered" class="text-center font-md">{{$index + 1 | number}}</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<input ng-model="row" ng-change="$ctrl.changeItem($index, row)" type="text" class="form-control"/>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td ng-if="$ctrl.config.allowDelete == undefined || $ctrl.config.allowDelete">\n\t\t\t\t\t\t\t\t<a ng-click="$ctrl.removeItem($index)" class="btn btn-danger btn-sm visible-parent-hover"><i class="fa fa-trash-o"></i></a>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t\t<tfoot class="hidden-print">\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td ng-if="$ctrl.config.numbered == undefined || $ctrl.config.numbered" class="text-center" width="30px">\n\t\t\t\t\t\t\t\t<button type="submit" ng-class="$ctrl.listNewItem.text ? $ctrl.config.addButtonActiveClass : $ctrl.config.addButtonInactiveClass"></button>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<input ng-model="$ctrl.listNewItem.text" type="text" class="form-control"/>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td width="35px">&nbsp;</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tfoot>\n\t\t\t\t</table>\n\t\t\t</form>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgNumber",{title:"Number",icon:"fa fa-sort-numeric-asc",category:"Simple Inputs",config:{min:{type:"mgNumber",title:"Minimum value"},max:{type:"mgNumber",title:"Maximum value"},step:{type:"mgNumber",title:"Value to increment / decrement by"},placeholder:{type:"mgNumber",help:"Ghost text to display when there is no value"},required:{type:"mgToggle",default:!1},interface:{type:"mgChoiceDropdown",title:"Interface",help:"How to allow number input",default:"bumpers",enum:[{id:"bumpers",title:"Number input with buttons"},{id:"slider",title:"Slider bar"},{id:"input",title:"Number input box only"}]},bumperDownClass:{type:"mgText",default:"btn btn-default fa fa-arrow-down input-group-addon",advanced:!0},bumperUpClass:{type:"mgText",default:"btn btn-default fa fa-arrow-up input-group-addon",advanced:!0},prefix:{type:"mgText",title:"Prefix",help:"Prefix to show before the input (input interface only)"},prefixClass:{type:"mgText",default:"input-group-addon",advanced:!0},suffix:{type:"mgText",title:"Suffix",help:"Suffix to show after the input (input interface only)"},suffixClass:{type:"mgText",default:"input-group-addon",advanced:!0}},format:function(v){return v?(_.isNumber(v)?v:parseInt(v)).toLocaleString():""},formatAlign:"right"})}]).component("mgNumber",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.validate=function(){return[$ctrl.config.required&&!$ctrl.data&&"".concat($ctrl.config.title," is required"),$ctrl.config.min&&$ctrl.data<$ctrl.config.min&&"".concat($ctrl.config.title," is too small (minimum value is ").concat($ctrl.config.min,")"),$ctrl.config.max&&$ctrl.data>$ctrl.config.max&&"".concat($ctrl.config.title," is too large (maximum value is ").concat($ctrl.config.max,")")]},$ctrl.add=function(steps){if(!angular.isNumber($ctrl.data))return $ctrl.data=$ctrl.config.min||0;$ctrl.data+=steps*($ctrl.step||1),$ctrl.config.max&&$ctrl.data>$ctrl.config.max&&($ctrl.data=$ctrl.config.max),$ctrl.config.min&&$ctrl.data<$ctrl.config.min&&($ctrl.data=$ctrl.config.min)},$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)}),$ctrl.$onInit=function(){return $scope.assignConfig("interface","bumperDownClass","bumperUpClass")}}],template:'\n\t\t\t<div ng-if="$ctrl.config.interface == \'slider\'">\n\t\t\t\t<input ng-model="$ctrl.data" type="range" class="form-control" placeholder="{{$ctrl.config.placeholder}}" min="{{$ctrl.config.min}}" max="{{$ctrl.config.max}}" step="{{$ctrl.config.step}}"/>\n\t\t\t</div>\n\t\t\t<div ng-if="$ctrl.config.interface == \'bumpers\'" class="input-group">\n\t\t\t\t<a ng-click="$ctrl.add(-1)" class="hidden-print" ng-class="$ctrl.config.bumperDownClass"></a>\n\t\t\t\t<input ng-model="$ctrl.data" type="number" class="form-control" placeholder="{{$ctrl.config.placeholder}}" min="{{$ctrl.config.min}}" max="{{$ctrl.config.max}}" step="{{$ctrl.config.step}}"/>\n\t\t\t\t<a ng-click="$ctrl.add(1)" class="hidden-print" ng-class="$ctrl.config.bumperUpClass"></a>\n\t\t\t</div>\n\t\t\t<div ng-if="$ctrl.config.interface == \'input\'" class="input-group">\n\t\t\t\t<div ng-if="$ctrl.config.prefix" ng-class="$ctrl.config.prefixClass || \'input-group-addon\'"><div class="input-group-text">{{$ctrl.config.prefix}}</div></div>\n\t\t\t\t<input ng-model="$ctrl.data" type="number" class="form-control" placeholder="{{$ctrl.config.placeholder}}" min="{{$ctrl.config.min}}" max="{{$ctrl.config.max}}" step="{{$ctrl.config.step}}"/>\n\t\t\t\t<div ng-if="$ctrl.config.suffix" ng-class="$ctrl.config.suffixClass || \'input-group-addon\'"><div class="input-group-text">{{$ctrl.config.suffix}}</div></div>\n\t\t\t</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgPlaceholder",{title:"Placeholder",icon:"fa fa-arrows-alt",category:"General Decoration",config:{text:{type:"mgText",default:""},height:{type:"mgNumber"},style:{type:"mgChoiceButtons",default:"placeholder-lines",iconSelected:"fa fa-fw fa-check",iconDefault:"fa fa-fw",enum:[{id:"placeholder-lines",title:"Lined box"},{id:"placeholder-construction",title:"Construction area"}]}}})}]).component("mgPlaceholder",{bindings:{config:"<"},controller:["$macgyver","$scope",function($macgyver,$scope){$macgyver.inject($scope,this)}],template:'\n\t\t\t<div ng-class="$ctrl.config.style || \'placeholder-box\'" style="height: {{$ctrl.config.height || \'auto\'}}">\n\t\t\t\t<div ng-if="$ctrl.config.text" class="placeholder-text" ng-bind="$ctrl.config.text"></div>\n\t\t\t</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgSeperator",{title:"Seperator",icon:"fa fa-minus",category:"General Decoration"})}]).component("mgSeperator",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){$macgyver.inject($scope,this)}],template:"\n\t\t\t<hr/>\n\t\t"}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgSignature",{title:"Signature input",icon:"fa fa-picture-o",category:"Files and uploads",config:{allowDelete:{type:"mgToggle",default:!0,help:"Allow the user to delete the signature and re-sign"}}})}]).component("mgSignature",{bindings:{config:"<",data:"="},controller:["$http","$macgyver","$scope",function($http,$macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.urls={},$ctrl.getUrl=function(type,context){if(_.isString($ctrl.urls[type]))return $ctrl.urls[type];if(_.isFunction($ctrl.urls[type]))return $ctrl.urls[type](Object.assign({},{type:type,widget:"mgSignature",path:$macgyver.getPath($scope)},context));throw new Error("Unknown URL type: "+type)},$ctrl.$onInit=function(){$ctrl.urls.query=$ctrl.config.urlQuery||$macgyver.settings.urlResolver||"/api/widgets",$ctrl.urls.upload=$ctrl.config.urlUpload||$macgyver.settings.urlResolver||function(o){return"/api/widgets/".concat(o.path)},$ctrl.urls.delete=$ctrl.config.urlDelete||$macgyver.settings.urlResolver||function(o){return"/api/widgets/".concat(o.path)},$ctrl.refresh()},$ctrl.files,$ctrl.refresh=function(){return $http.get($ctrl.getUrl("query")).then(function(data){return $ctrl.files=data.data})},$ctrl.isUploading=!1,$ctrl.getSignature=function(dataURI,blob){var sigBlob=new Blob([blob],{type:"image/png"}),formData=new FormData;formData.append("file",sigBlob),$http.post($ctrl.getUrl("upload",{file:"signature.png"}),formData,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).then(function(){$ctrl.isUploading=!1,$ctrl.refresh()}),$ctrl.isUploading=!0},$ctrl.delete=function(file){return $http.delete($ctrl.getUrl("delete",{file:"signature.png"})).then($ctrl.refresh,$ctrl.refresh)}}],template:'\n\t\t\t<div ng-if="$ctrl.files && $ctrl.files.length" class="visible-parent-hover-target">\n\t\t\t\t<img ng-src="{{$ctrl.files[0].url}}" class="img-responsive"/>\n\t\t\t\t<a ng-click="$ctrl.delete()" class="btn btn-danger btn-circle btn-lg btn-fab visible-parent-hover" tooltip="Delete the signature" tooltip-tether="true"><i class="fa fa-fw fa-trash"></i></a>\n\t\t\t</div>\n\t\t\t<div ng-if="!$ctrl.files || !$ctrl.files.length">\n\t\t\t\t<div ng-if="$ctrl.isUploading" class="alert alert-info font-lg">\n\t\t\t\t\t<i class="fa fa-spinner fa-spin"></i>\n\t\t\t\t\tUploading signature...\n\t\t\t\t</div>\n\t\t\t\t<div ng-if="!$ctrl.isUploading">\n\t\t\t\t\t<ui-scribble editable="false" callback="$ctrl.getSignature(dataURI, blob)"></ui-scribble>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgTable",{title:"Table layout",icon:"fa fa-table",category:"Layout",isContainer:!0,isContainerArray:!0,config:{allowAdd:{type:"mgToggle",title:"Allow Row Addition",default:!0},allowDelete:{type:"mgToggle",title:"Allow Row Deletion",default:!0},textEmpty:{type:"mgText",title:"No data message",default:"No data"},items:{type:"mgTableEditor",editable:!0,title:"Column setup",default:[{id:"col1",type:"mgText"},{id:"col2",title:"mgText"},{id:"col3",title:"mgText"}]},addButtonActiveClass:{type:"mgText",default:"btn btn-block btn-success fa fa-plus",advanced:!0},addButtonInactiveClass:{type:"mgText",default:"btn btn-block btn-disabled fa fa-plus",advanced:!0},style:{type:"mgChoiceDropdown",title:"Table style",help:"How to style the table",default:"table-bordered",enum:[{id:"",title:"Bordered",class:"table-bordered"},{id:"mgTableBorderless",title:"Borderless",class:"table-borderless"},{id:"mgTableCondensed",title:"Condensed",class:"table-condensed"}]},styleCompact:{type:"mgToggle",title:"Compact forms",default:!1},styleDarker:{type:"mgToggle",title:"Darker borders",default:!1},styleHover:{type:"mgToggle",title:"Hover rows",default:!0},styleStriped:{type:"mgToggle",title:"Striped rows",default:!0}},configChildren:{showTitle:{type:"mgToggle",default:!1,title:"Show Title"}}})}]).component("mgTable",{bindings:{config:"<",data:"="},controller:["$element","$macgyver","$scope",function($element,$macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.isEditing=!!$element.closest("mg-form-editor").length,$scope.$watchGroup(["$ctrl.isEditing","$ctrl.config.items","$ctrl.config.default"],function(){$ctrl.isEmpty()&&(_.isEmpty($ctrl.config.default)?$ctrl.isEditing&&($ctrl.fakeData=[_($ctrl.config.items).mapKeys("id").mapValues(function(col){return col.default}).value()]):($ctrl.data=$ctrl.config.default,$ctrl.isEditing&&($ctrl.fakeData=$ctrl.data)))}),$scope.$watch("$ctrl.data",function(){_.isArray($ctrl.data)||($ctrl.data=[])}),$ctrl.allowAdd=!1,$scope.$watch("$ctrl.config.allowAdd",function(){$ctrl.allowAdd=void 0===$ctrl.config.allowAdd||$ctrl.config.allowAdd}),$ctrl.isAdding=!1,$ctrl.newRow={},$scope.$watch("$ctrl.newRow",function(){$ctrl.isAdding=!_.isEmpty($ctrl.newRow)},!0),$ctrl.createRow=function(){$ctrl.data.push($ctrl.newRow),$ctrl.newRow={},$element.find(".mgTable-append > td input").first().focus()},$element.on("keypress",function(e){return $scope.$apply(function(){13==e.which&&(e.stopPropagation(),e.preventDefault(),$ctrl.createRow())})}),$ctrl.allowDelete=!1,$scope.$watch("$ctrl.config.allowDelete",function(){$ctrl.allowDelete=void 0===$ctrl.config.allowDelete||$ctrl.config.allowDelete}),$ctrl.deleteRow=function(index){return $ctrl.data.splice(index,1)},$ctrl.isEmpty=function(){return _.isEmpty($ctrl.data)||1==$ctrl.data.length&&_.every($ctrl.data[0],function(v){return!v})},$ctrl.$onInit=function(){return $scope.assignConfig("addButtonActiveClass","addButtonInactiveClass")}}],template:'\n\t\t\t<table class="table" ng-class="[\n\t\t\t\t$ctrl.config.style ? $ctrl.config.style : \'table-bordered\',\n\t\t\t\t$ctrl.config.styleHover ? \'table-hover\' : undefined,\n\t\t\t\t$ctrl.config.styleStriped ? \'table-striped\' : undefined,\n\t\t\t\t$ctrl.config.styleCompact ? \'table-compact\' : undefined,\n\t\t\t\t$ctrl.config.styleDarker ? \'table-darker\' : undefined\n\t\t\t]">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th ng-if="$ctrl.config.rowNumbers === undefined || $ctrl.config.rowNumbers" width="30px" class="text-center font-md">#</th>\n\t\t\t\t\t\t<th ng-repeat="col in $ctrl.config.items track by col.id" style="{{(col.width ? \'width: \' + col.width + \'; \' : \'\') + col.class}}">\n\t\t\t\t\t\t\t{{col.title}}\n\t\t\t\t\t\t</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody ng-if="$ctrl.isEditing">\n\t\t\t\t\t<tr ng-repeat="row in $ctrl.fakeData">\n\t\t\t\t\t\t<td ng-if="$ctrl.config.rowNumbers === undefined || $ctrl.config.rowNumbers" class="text-center font-md">{{$index + 1 | number}}</td>\n\t\t\t\t\t\t<td ng-repeat="col in $ctrl.config.items track by col.id" class="{{col.class}}">\n\t\t\t\t\t\t\t<mg-container config="{items: [col]}" data="row"></mg-container>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t\t<tbody ng-if="!$ctrl.isEditing" class="hidden-print">\n\t\t\t\t\t<tr ng-if="!$ctrl.data">\n\t\t\t\t\t\t<td colspan="{{$ctrl.config.items.length + ($ctrl.config.rowNumbers === undefined || $ctrl.config.rowNumbers ? 1 : 0}}">\n\t\t\t\t\t\t\t<div class="alert alert-warning m-10">{{$ctrl.config.textEmpty || \'No data\'}}</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr ng-repeat="row in $ctrl.data">\n\t\t\t\t\t\t<td ng-if="$ctrl.config.rowNumbers === undefined || $ctrl.config.rowNumbers" class="text-center">\n\t\t\t\t\t\t\t<div class="btn-group btn-block">\n\t\t\t\t\t\t\t\t<a class="btn btn-block btn-ellipsis btn-ellipsis-sm dropdown-toggle" data-toggle="dropdown">{{$index + 1 | number}}</a>\n\t\t\t\t\t\t\t\t<ul class="dropdown-menu">\n\t\t\t\t\t\t\t\t\t<li ng-if="$ctrl.allowDelete"><a ng-click="$ctrl.deleteRow($index)"><i class="fa fa-trash-o"></i> Delete</a></li>\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td ng-repeat="col in $ctrl.config.items track by col.id" class="{{col.class}}">\n\t\t\t\t\t\t\t<mg-container config="{items: [col]}" data="row"></mg-container>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr class="mgTable-append" ng-if="$ctrl.allowAdd">\n\t\t\t\t\t\t<td class="text-center">\n\t\t\t\t\t\t\t<button ng-click="$ctrl.createRow()" type="button" ng-class="$ctrl.isAdding ? $ctrl.config.addButtonActiveClass : $ctrl.config.addButtonInactiveClass"></button>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td ng-repeat="col in $ctrl.config.items track by col.id">\n\t\t\t\t\t\t\t<mg-container config="{items: [col]}" data="$ctrl.newRow"></mg-container>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgTableEditor",{title:"Table Editor",icon:"fa fa-pencil-square-o",config:{},userPlaceable:!1})}]).component("mgTableEditor",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;($ctrl.$macgyver=$macgyver).inject($scope,$ctrl),$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)}),$ctrl.add=function(){$ctrl.data||($ctrl.data=[]),$ctrl.data.push({title:"Column ".concat($ctrl.data.length+1),type:"mgText",showTitle:!1})},$ctrl.remove=function(index){return $ctrl.data=$ctrl.data.filter(function(c,i){return i!=index})},$ctrl.widgetSelection,$scope.$watch("$ctrl.$macgyver.widgets",function(){$ctrl.widgetSelection=_($macgyver.widgets).map().sortBy("title").value()})}],template:'\n\t\t\t<table class="table table-bordered table-striped">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th width="50%">Title</th>\n\t\t\t\t\t\t<th width="25%">Type</th>\n\t\t\t\t\t\t<th width="25%">\n\t\t\t\t\t\t\tWidth\n\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\tclass="pull-right fa fa-info-circle"\n\t\t\t\t\t\t\t\ttooltip="Width can be any valid CSS specifier. e.g. \'100\' (assumes pixels), \'50px\', \'20%\'"\n\t\t\t\t\t\t\t></i>\n\t\t\t\t\t\t</th>\n\t\t\t\t\t\t<th width="32px">&nbsp;</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr ng-repeat="item in $ctrl.data">\n\t\t\t\t\t\t<td><input ng-model="item.title" type="text" class="form-control"/></td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<select ng-model="item.type" class="form-control">\n\t\t\t\t\t\t\t\t<option ng-repeat="widget in $ctrl.widgetSelection track by widget.id" value="{{widget.id}}">{{widget.title}}</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td><input ng-model="item.width" type="text" class="form-control" placeholder="Default"/></td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<a ng-click="$ctrl.remove($index)" class="btn btn-danger btn-sm">\n\t\t\t\t\t\t\t\t<i class="fa fa-trash"></i>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t\t<tfoot>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td colspan="4" class="text-center">\n\t\t\t\t\t\t\t<a ng-click="$ctrl.add()" class="btn btn-sm btn-success">\n\t\t\t\t\t\t\t\t<i class="fa fa-plus"></i>\n\t\t\t\t\t\t\t\tAdd column\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tfoot>\n\t\t\t</table>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgText",{title:"Textbox",icon:"fa fa-pencil-square-o",category:"Simple Inputs",config:{lengthMin:{type:"mgNumber",title:"Minimum Length"},lengthMax:{type:"mgNumber",title:"Maximum Length"},placeholder:{type:"mgText",help:"Ghost text to display when the textbox has no value"},required:{type:"mgToggle",default:!1}},format:!0})}]).component("mgText",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.validate=function(){return[$ctrl.config.required&&!$ctrl.data&&"".concat($ctrl.config.title," is required"),$ctrl.config.lengthMin&&_.isString($ctrl.data)&&$ctrl.data.length<$ctrl.config.lengthMin&&"".concat($ctrl.config.title," is too small (minimum length is ").concat($ctrl.config.lengthMin,")"),$ctrl.config.lengthMax&&_.isString($ctrl.data)&&$ctrl.data.length>$ctrl.config.lengthMax&&"".concat($ctrl.config.title," is too long (maximum length is ").concat($ctrl.config.lengthMax,")")]},$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<input ng-model="$ctrl.data" type="text" class="form-control" placeholder="{{$ctrl.config.placeholder}}"/>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgTextArea",{title:"Multi-line text",icon:"fa fa-align-justify",category:"Simple Inputs",config:{rows:{type:"mgNumber",title:"Line height",default:3},lengthMin:{type:"mgNumber",title:"Minimum Length"},lengthMax:{type:"mgNumber",title:"Maximum Length"},placeholder:{type:"mgTextArea",help:"Ghost text to display when the textbox has no value"},required:{type:"mgToggle",default:!1}},format:!0})}]).component("mgTextArea",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.validate=function(){return[$ctrl.config.required&&!$ctrl.data&&"".concat($ctrl.config.title," is required"),$ctrl.config.lengthMin&&_.isString($ctrl.data)&&$ctrl.data.length<$ctrl.config.lengthMin&&"".concat($ctrl.config.title," is too small (minimum length is ").concat($ctrl.config.lengthMin,")"),$ctrl.config.lengthMax&&_.isString($ctrl.data)&&$ctrl.data.length>$ctrl.config.lengthMax&&"".concat($ctrl.config.title," is too long (maximum length is ").concat($ctrl.config.lengthMax,")")]},$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<textarea ng-model="$ctrl.data" class="form-control" placeholder="{{$ctrl.config.placeholder}}" minlength="{{$ctrl.config.lengthMin}}" maxlength="{{$ctrl.config.lengthMin}}" rows="{{$ctrl.config.rows || 3}}"/>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgTime",{title:"Time selection",icon:"fa fa-clock-o",category:"Simple Inputs",config:{min:{type:"mgTime",title:"Earliest time"},max:{type:"mgNumber",title:"Latest time"},required:{type:"mgToggle",default:!1}},format:function(v){return v?(v instanceof Date?v:new Date(v)).toLocaleTimeString():""},formatAlign:"center"})}]).component("mgTime",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.validate=function(){return[$ctrl.config.required&&!$ctrl.data&&"".concat($ctrl.config.title," is required"),$ctrl.config.min&&_.isString($ctrl.data)&&$ctrl.data<$ctrl.config.min&&"".concat($ctrl.config.title," is too early (earliest time is ").concat($ctrl.config.min,")"),$ctrl.config.max&&_.isString($ctrl.data)&&$ctrl.data>$ctrl.config.max&&"".concat($ctrl.config.title," is too late (latest time is ").concat($ctrl.config.max,")")]},$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<input ng-model="$ctrl.data" type="time" class="form-control"/>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgToggle",{title:"Switch",icon:"fa fa-toggle-on",category:"Simple Inputs",config:{onText:{type:"mgText",default:"On"},onClassActive:{type:"mgText",default:"btn-success",advanced:!0},onClassInactive:{type:"mgText",default:"btn-default",advanced:!0},offText:{type:"mgText",default:"Off"},offClassActive:{type:"mgText",default:"btn-danger",advanced:!0},offClassInactive:{type:"mgText",default:"btn-default",advanced:!0}},format:function(v,config){return v?config&&config.onText?config.onText:"On":config&&config.offText?config.offText:"Off"},formatAlign:"center"})}]).component("mgToggle",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)}),$ctrl.$onInit=function(){return $scope.assignConfig()}}],template:'\n\t\t\t<div class="btn-group">\n\t\t\t\t<a ng-click="$ctrl.data = !$ctrl.data" class="btn" ng-class="!$ctrl.data ? $ctrl.config.offClassActive : $ctrl.config.offClassInactive">{{$ctrl.config.offText}}</a>\n\t\t\t\t<a ng-click="$ctrl.data = !$ctrl.data" class="btn" ng-class="$ctrl.data ? $ctrl.config.onClassActive : $ctrl.config.onClassInactive">{{$ctrl.config.onText}}</a>\n\t\t\t</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgUrl",{title:"URL",icon:"fa fa-globe",category:"Simple Inputs",config:{placeholder:{type:"mgUrl",help:"Ghost text to display when the textbox has no value"},required:{type:"mgToggle",default:!1}},format:function(v){return v?'<a href="'.concat(v,'" target="_blank">').concat(v,"</a>"):""}})}]).component("mgUrl",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.validate=function(){return[$ctrl.config.required&&!$ctrl.data&&"".concat($ctrl.config.title," is required")]},$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<input ng-model="$ctrl.data" type="url" class="form-control" placeholder="{{$ctrl.config.placeholder}}"/>\n\t\t'});
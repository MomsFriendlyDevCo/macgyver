"use strict";function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++)arr2[i]=arr[i];return arr2}return Array.from(arr)}angular.module("macgyver",["ngSanitize","ui.select"]).provider("$macgyver",function(){this.widgets={},this.register=function(id,properties){this.widgets[id]=properties||{},this.widgets[id].id=id;var domName=_.kebabCase(id);return _.defaults(this.widgets[id],{template:"<"+domName+' config="w" data="$ctrl.data[w.id]"></'+domName+">",title:_.startCase(id)}),this},this.getDataTree=function(root,useDefaults){var _this=this;if(root)return this.widgets[root.type]?this.widgets[root.type].isContainer&&!this.widgets[root.type].isContainerArray?_(root.items).mapKeys("id").mapValues(function(i){return _this.getDataTree(i)}).value():this.widgets[root.type].isContainer&&this.widgets[root.type].isContainerArray?[_(root.items).mapKeys("id").mapValues(function(i){return _this.getDataTree(i)}).value()]:useDefaults?root.default:null:(console.warn('Unknown widget type "'+root.type+'" for item ID "'+root.id+'" - assuming is not a container'),useDefaults?root.default:null);console.warn("Empty MacGyver form tree")},this.getForm=function($scope){var form={};return $scope.$broadcast("mg.getForm",form),form.form},this.getAll=function($scope){var components={};return $scope.$broadcast("mg.get",components),components},this.inject=function($scope,$ctrl){$scope.$on("mg.get",function(e,c){return c[$ctrl.config.id]=$ctrl})},this.$get=function(){return this}}).filter("filesize",function(){return filesize}),angular.module("macgyver").provider("$macgyver",function(){var $macgyver=this;$macgyver.widgets={},$macgyver.settings={urlResolver:void 0},$macgyver.register=function(id,properties){$macgyver.widgets[id]=properties||{},$macgyver.widgets[id].id=id;var domName=_.kebabCase(id);return _.defaults($macgyver.widgets[id],{template:"<"+domName+' config="w" data="$ctrl.data[w.id]"></'+domName+">",title:_.startCase(id),userPlaceable:!0,category:"Misc"}),$macgyver},$macgyver.getDataTree=function(root,useDefaults){if(root)return $macgyver.widgets[root.type]?$macgyver.widgets[root.type].isContainer&&!$macgyver.widgets[root.type].isContainerArray?_(root.items).mapKeys("id").mapValues(function(i){return $macgyver.getDataTree(i)}).value():$macgyver.widgets[root.type].isContainer&&$macgyver.widgets[root.type].isContainerArray?[_(root.items).mapKeys("id").mapValues(function(i){return $macgyver.getDataTree(i)}).value()]:useDefaults?root.default:null:(console.warn('Unknown widget type "'+root.type+'" for item ID "'+root.id+'" - assuming is not a container'),useDefaults?root.default:null);console.warn("Empty MacGyver form tree")},$macgyver.getForm=function($scope){var direction=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"downwards",want=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"$ctrl",form={};if("downwards"==direction)$scope.$broadcast("mg.getForm",form);else{if("upwards"!=direction)throw new Error("Unknown form search direction: "+direction);$scope.$emit("mg.getForm",form)}return form[want]},$macgyver.getAll=function($scope){var components={};return $scope.$broadcast("mg.get",components),components},$macgyver.getPath=function($scope){var overridePath=_.get($scope,["$ctrl","config","mgPath"]);if(overridePath&&_.isArray(overridePath))return overridePath;if(_.isString(overridePath))return overridePath.split(".");var stack=[];return $scope.$emit("mg.getStack",stack),stack.map(function(i){return i.id}).filter(function(i){return!!i})},$macgyver.inject=function($scope,$ctrl){$scope.$on("mg.get",function(e,c){return c[$ctrl.config.id]=$ctrl}),$scope.$on("mg.getStack",function(e,c){return c.push({id:$ctrl.config.id,$ctrl:$ctrl,$scope:$scope}),c})},$macgyver.broadcast=function($scope){for(var mgForm=$macgyver.getForm($scope,"upwards","$scope"),_len=arguments.length,message=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)message[_key-1]=arguments[_key];return mgForm?mgForm.$broadcast.apply(mgForm,message):void 0},$macgyver.forEach=function(spec,cb){!function forEachScanner(root,path){var rootPath=(path?path+".":"")+(root.id||"");cb(root,rootPath),_.isArray(root.items)&&root.items.forEach(function(i){return forEachScanner(i,rootPath)})}(spec)},$macgyver.flattenSpec=function(spec){var res={};return $macgyver.forEach(spec,function(widget,path){return res[path]=widget}),res},$macgyver.$get=function(){return $macgyver}}).filter("mgFilterObject",function(){return function(value,filter){return _.pickBy(value,function(i){return _.isMatch(i,filter)})}}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgAlert",{title:"Alert Box",icon:"fa fa-exclamation-triangle",category:"General Decoration",config:{text:{type:"mgText",default:"This is an alert!"},style:{type:"mgChoiceButtons",default:"alert-info",iconSelected:"fa fa-fw fa-check",iconDefault:"fa fa-fw",enum:[{id:"alert-success",class:"btn-success"},{id:"alert-info",class:"btn-info"},{id:"alert-warning",class:"btn-warning"},{id:"alert-danger",class:"btn-danger"}]}}})}]).component("mgAlert",{bindings:{config:"<"},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl)}],template:'\n\t\t\t<div class="alert" ng-class="$ctrl.config.style">{{$ctrl.config.text || $scope.data}}</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgCheckBox",{title:"Check Box",icon:"fa fa-check-square-o",category:"Simple Inputs",config:{}})}]).component("mgCheckBox",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'<div class="text-center">\n\t\t\t<input ng-model="$ctrl.data" type="checkbox"/>\n\t\t</div>'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgChoiceButtons",{title:"Button multiple-choice",icon:"fa fa-check-square",category:"Choice Selectors",config:{enum:{type:"mgList",title:"The list of items to display",default:["Foo","Bar","Baz"]},classWrapper:{type:"mgText",default:"btn-group",title:"Group CSS class"},classItem:{type:"mgText",default:"btn",title:"Item CSS class"},itemIconDefault:{type:"mgText"},itemIconSelected:{type:"mgText"},itemClassDefault:{type:"mgText",default:"btn-default"},itemClassSelected:{type:"mgText",default:"btn-primary"}}})}]).component("mgChoiceButtons",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.enumIter=[],$scope.$watch("$ctrl.config.enum",function(){$ctrl.config.enum&&(_.isArray($ctrl.config.enum)&&_.isString($ctrl.config.enum[0])?$ctrl.enumIter=$ctrl.config.enum.map(function(i){return{id:_.camelCase(i),title:i}}):_.isArray($ctrl.config.enum)&&_.isObject($ctrl.config.enum[0])&&($ctrl.enumIter=$ctrl.config.enum))}),$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<div ng-class="$ctrl.config.classWrapper || \'btn-group\'">\n\t\t\t\t<div ng-repeat="item in $ctrl.enumIter track by item.id" ng-class="[$ctrl.config.classItem || \'btn\', item.class || ($ctrl.data == item.id ? $ctrl.config.itemClassSelected  || \'btn-primary\': $ctrl.config.itemClassDefault)]" ng-click="$ctrl.data = item.id">\n\t\t\t\t\t<i ng-class="$ctrl.data == item.id ? (item.iconSelected || $ctrl.config.iconSelected) : (item.icon || $ctrl.config.iconDefault)"></i>\n\t\t\t\t\t{{item.title}}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgChoiceDropdown",{title:"Dropdown multiple-choice",icon:"fa fa-chevron-circle-down",category:"Choice Selectors",config:{url:{type:"mgUrl",help:"Data feed URL"},enum:{type:"mgList",title:"The list of items to display",default:["Foo","Bar","Baz"]},textPrompt:{type:"mgText",default:"Choose an item..."},textInnerPrompt:{type:"mgText",default:"Select an item..."},displayPrimaryField:{type:"mgText",default:"title",help:"The field of each enum item to display as the primary selection text"},displaySecondaryField:{type:"mgText",help:"The field of each enum to display as a secondary item"}}})}]).component("mgChoiceDropdown",{bindings:{config:"<",data:"="},controller:["$http","$macgyver","$scope",function($http,$macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.enumIter=[],$scope.$watch("$ctrl.config.enum",function(){$ctrl.config.enum&&(_.isArray($ctrl.config.enum)&&_.isString($ctrl.config.enum[0])?$ctrl.enumIter=$ctrl.config.enum.map(function(i){return{id:_.camelCase(i),title:i}}):_.isArray($ctrl.config.enum)&&_.isObject($ctrl.config.enum[0])&&($ctrl.enumIter=$ctrl.config.enum))}),$scope.$watch("$ctrl.url",function(){$ctrl.config.url&&$http.get($ctrl.config.url).then(function(res){return $ctrl.enumIter=res.data.map(function(i){return i._id&&(i.id=i._id,delete i._id),i})})}),$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<ui-select ng-model="$ctrl.data" title="{{$ctrl.config.textPrompt || \'Choose an item...\'}}">\n\t\t\t\t<ui-select-match placeholder="{{$ctrl.config.textInnerPrompt || \'Select an item...\'}}">{{$select.selected[$ctrl.config.displayPrimaryField || \'title\']}}</ui-select-match>\n\t\t\t\t<ui-select-choices repeat="item.id as item in $ctrl.enumIter | filter:$select.search track by item.id" group-by="$ctrl.config.groupBy">\n\t\t\t\t\t<div ng-bind-html="item[$ctrl.config.displayPrimaryField || \'title\'] | highlight:$select.search"></div>\n\t\t\t\t\t<small ng-if="$ctrl.config.displaySecondaryField" ng-bind-html="item[$ctrl.config.displaySecondaryField] | highlight:$select.search"></small>\n\t\t\t\t</ui-select-choices>\n\t\t\t</ui-select>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgChoiceRadio",{title:"Radio multiple-choice",icon:"fa fa-list-ul",category:"Choice Selectors",config:{enum:{type:"mgList",title:"The list of items to display",default:["Foo","Bar","Baz"]}}})}]).component("mgChoiceRadio",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.enumIter=[],$scope.$watch("$ctrl.config.enum",function(){$ctrl.config.enum&&(_.isArray($ctrl.config.enum)&&_.isString($ctrl.config.enum[0])?$ctrl.enumIter=$ctrl.config.enum.map(function(i){return{id:_.camelCase(i),title:i}}):_.isArray($ctrl.config.enum)&&_.isObject($ctrl.config.enum[0])&&($ctrl.enumIter=$ctrl.config.enum))}),$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<div class="radio" ng-repeat="item in $ctrl.enumIter track by item.id">\n\t\t\t\t<label>\n\t\t\t\t\t<input ng-model="$ctrl.data" type="radio" name="{{$ctrl.config.id}}" value="{{item.id}}"/>\n\t\t\t\t\t{{item.title}}\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgContainer",{title:"Container layout",icon:"fa fa-dropbox",category:"Layout",isContainer:!0,template:'<mg-container config="w" data="w.ignoreScope ? $ctrl.data : $ctrl.data[w.id]"></mg-container>',config:{ignoreScope:{type:"mgToggle",default:!1,title:"Ignore Scope",help:"Flatten the data scope with the parent level - i.e. dont nest any child element inside an object when saving data"}},configChildren:{help:{type:"mgText",title:"Help text",help:"Optional help text for the item - just like what you are reading now"},showTitle:{type:"mgToggle",default:!0,title:"Show Title",help:"Whether to show the side title for this element"},title:{type:"mgText",title:"Title"}}})}]).component("mgContainer",{bindings:{config:"<",data:"="},controller:["$element","$macgyver","$scope",function($element,$macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.isEditing=!!$element.closest("mg-form-editor").length,$ctrl.widgetAddChild=function(){return $scope.$emit("mg.mgFormEditor.widgetAdd","inside",$ctrl.config.id)}}],template:["$macgyver",function($macgyver){return'\n\t\t\t<div ng-click="$ctrl.widgetAddChild()" ng-if="$ctrl.isEditing && !$ctrl.config.items.length" class="text-center">\n\t\t\t\t<a class="btn btn-sm btn-success"><i class="fa fa-plus"></i> Add widget</a>\n\t\t\t</div>\n\t\t\t<div ng-repeat="w in $ctrl.config.items track by w.id" ng-switch="w.type" data-path="{{w.id}}" class="form-group" ng-class="w.mgValidation == \'error\' && \'has-error\'">\n\t\t\t\t<label ng-if="w.showTitle || w.showTitle===undefined" class="col-sm-3 control-label">{{w.title}}</label>\n\t\t\t\t<div ng-class="w.showTitle || w.showTitle===undefined ? \'col-sm-9\' : \'col-sm-12\'">\n\t\t\t'+_.map($macgyver.widgets,function(w){return'<div ng-switch-when="'+w.id+'">'+w.template+"</div>"}).join("\n")+'\n\t\t\t\t\t<div ng-switch-default class="alert alert-danger">Unknown MacGyver widget type : "{{w.type}}"</div>\n\t\t\t\t\t<div ng-if="w.help" class="help-block">{{w.help}}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t'}]}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgDate",{title:"Date selection",icon:"fa fa-calendar",category:"Simple Inputs",config:{min:{type:"mgDate",title:"Earliest date"},max:{type:"mgDate",title:"Latest date"},required:{type:"mgToggle",default:!1}}})}]).component("mgDate",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.validate=function(){return[$ctrl.config.required&&!$ctrl.data&&$ctrl.config.title+" is required",$ctrl.config.min&&_.isString($ctrl.data)&&$ctrl.data<$ctrl.config.min&&$ctrl.config.title+" is too early (earliest date is "+$ctrl.config.min+")",$ctrl.config.max&&_.isString($ctrl.data)&&$ctrl.data>$ctrl.config.max&&$ctrl.config.title+" is too late (latest date is "+$ctrl.config.max+")"]},$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<input ng-model="$ctrl.data" type="date" class="form-control"/>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgEmail",{title:"Email address",icon:"fa fa-envelope-o",category:"Simple Inputs",config:{placeholder:{type:"mgText",help:"Ghost text to display when the text box has no value"},required:{type:"mgToggle",default:!1}}})}]).component("mgEmail",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.validate=function(){return[$ctrl.config.required&&!$ctrl.data&&$ctrl.config.title+" is required"]},$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<input ng-model="$ctrl.data" type="email" class="form-control" placeholder="{{$ctrl.config.placeholder}}"/>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgFileList",{title:"File list",icon:"fa fa-files-o",category:"Files and uploads",config:{allowDelete:{type:"mgToggle",default:!0},listMode:{type:"mgChoiceButtons",enum:["list","thumbnails"],default:"list"}}})}]).component("mgFileList",{bindings:{config:"<",data:"="},controller:["$element","$http","$macgyver","$scope","$timeout",function($element,$http,$macgyver,$scope,$timeout){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.thumbnailAble=["png","jpg","jpeg","gif","webm","svg"],$ctrl.urls={},$ctrl.getUrl=function(type,context){if(_.isString($ctrl.urls[type]))return $ctrl.urls[type];if(_.isFunction($ctrl.urls[type]))return $ctrl.urls[type](Object.assign({},{type:type,widget:"mgFileList",path:$macgyver.getPath($scope)},context));throw new Error("Unknown URL type: "+type)},$ctrl.$onInit=function(){$ctrl.urls.query=$ctrl.config.urlQuery||$macgyver.settings.urlResolver||"/api/widgets",$ctrl.urls.delete=$ctrl.config.urlDelete||$macgyver.settings.urlResolver||function(o){return"/api/widgets/"+o.path},$ctrl.refresh()},$ctrl.refresh=function(){_.isEmpty($ctrl.data)?$http.get($ctrl.getUrl("query")).then(function(data){return $ctrl.data=data.data.map(function(file){return _.isString(file.thumbnail)||(file.thumbnail=$ctrl.thumbnailAble.includes(file.ext)),file})}):$ctrl.data=$ctrl.data},$scope.$on("mg.refreshUploads",function(){return $ctrl.refresh()}),$ctrl.delete=function(file){return $http.delete($ctrl.getUrl("delete",{file:file.name})).then($ctrl.refresh,$ctrl.refresh).then(function(){_.isFunction($ctrl.config.onDelete)&&$ctrl.config.onDelete(file)})}}],template:'\n\t\t\t<ul ng-if="!$ctrl.config.listMode || $ctrl.config.listMode == \'list\'" class="list-group">\n\t\t\t\t<a ng-repeat="file in $ctrl.data track by file.name" class="list-group-item" href="{{file.url}}" target="_blank">\n\t\t\t\t\t<span class="badge">{{file.size | filesize}}</span>\n\t\t\t\t\t<button ng-if="$ctrl.config.allowDelete === undefined || $ctrl.config.allowDelete" ng-click="$ctrl.delete(file); $event.preventDefault()" type="button" class="btn btn-danger btn-sm visible-parent-hover pull-right m-t--5 m-r-5"><i class="fa fa-trash"></i></button>\n\t\t\t\t\t<i ng-class="file.icon"></i>\n\t\t\t\t\t{{file.name}}\n\t\t\t\t</a>\n\t\t\t\t<li ng-repeat="file in $ctrl.uploading" class="list-group-item">\n\t\t\t\t\t<i class="fa fa-spinner fa-spin"></i>\n\t\t\t\t\t{{file.name}}\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t<div ng-if="$ctrl.config.listMode == \'thumbnails\'" class="row" style="display:flex; flex-wrap: wrap">\n\t\t\t\t<div ng-repeat="file in $ctrl.data track by file.name" class="col-xs-6 col-md-3 m-b-10 visible-parent-hover-target">\n\t\t\t\t\t<a class="thumbnail" href="{{file.url}}" target="_blank" style="height: 100%; display: flex; align-items: center; justify-content: center">\n\t\t\t\t\t\t<img ng-if="file.thumbnail" src="{{file.url}}"/>\n\t\t\t\t\t\t<div ng-if="!file.thumbnail" class="text-center"><i ng-class="file.icon" class="fa-5x"></i></div>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a ng-if="$ctrl.config.allowDelete === undefined || $ctrl.config.allowDelete" ng-click="$ctrl.delete(file)" class="btn btn-circle btn-danger visible-parent-hover" style="position: absolute; bottom: 15px; right: 20px">\n\t\t\t\t\t\t<i class="fa fa-fw fa-lg fa-trash"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgFileUpload",{title:"File upload",icon:"fa fa-file-o",category:"Files and uploads",config:{icon:{type:"mgText",default:"fa fa-file-text"},placeholder:{type:"mgText",default:"Upload file...",help:"Ghost text to display when no file is present"},allowDelete:{type:"mgToggle",default:!0},showList:{type:"mgToggle",default:!0,help:"Show a list of files already uploaded"},listMode:{type:"mgChoiceButtons",enum:["list","thumbnails"],default:"list"},showUploading:{type:"mgToggle",default:!0}}})}]).component("mgFileUpload",{bindings:{config:"<",data:"=?"},controller:["$element","$http","$macgyver","$scope","$timeout",function($element,$http,$macgyver,$scope,$timeout){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.urls={},$ctrl.getUrl=function(type,context){if(_.isString($ctrl.urls[type]))return url[type];if(_.isFunction($ctrl.urls[type]))return $ctrl.urls[type](Object.assign({},{type:type,widget:"mgFileUpload",path:$macgyver.getPath($scope)},context));throw new Error("Unknown URL type: "+type)},$ctrl.$onInit=function(){$ctrl.urls.upload=$ctrl.config.urlUpload||$macgyver.settings.urlResolver||function(o){return"/api/widgets/"+o.path},$ctrl.listConfig=angular.extend({},$ctrl.config,{mgPath:$macgyver.getPath($scope)})},$ctrl.selectedFile,$ctrl.uploading=[],$ctrl.click=function(){return $element.find("input[type=file]").trigger("click")},$element.find("input[type=file]").on("change",function(){var _this2=this;$timeout(function(){var filename=$(_this2).val().replace(/\\/g,"/").replace(/.*\//,""),formData=new FormData;formData.append("file",_this2.files[0]),$ctrl.uploading.push({name:filename,$promise:$http.post($ctrl.getUrl("upload",{file:filename}),formData,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).then(function(){$ctrl.uploading=$ctrl.uploading.filter(function(i){return i.name!=filename}),_.isFunction($ctrl.config.onUpload)&&$ctrl.config.onUpload(),$macgyver.broadcast($scope,"mg.refreshUploads")})})})})}],template:'\n\t\t\t<a ng-click="$ctrl.click()" class="btn btn-primary hidden-print" style="margin-bottom:10px">\n\t\t\t\t<i ng-class="$ctrl.icon || \'fa fa-file\'"></i>\n\t\t\t\t{{$ctrl.selectedFile || $ctrl.placeholder || \'Upload file...\'}}\n\t\t\t</a>\n\t\t\t<div ng-if="$ctrl.config.showList === undefined || $ctrl.config.showList">\n\t\t\t\t<mg-file-list config="$ctrl.listConfig" data="$ctrl.data"></mg-file-list>\n\t\t\t</div>\n\t\t\t<ul ng-if="$ctrl.config.showUploading === undefined || $ctrl.config.showUploading" class="list-group">\n\t\t\t\t<li ng-repeat="file in $ctrl.uploading" class="list-group-item">\n\t\t\t\t\t<i class="fa fa-spinner fa-spin"></i>\n\t\t\t\t\t{{file.name}}\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t<div style="display: none"><input type="file" name="file"/></div>\n\t\t'}),angular.module("macgyver").component("mgForm",{bindings:{config:"<",data:"="},controller:["$macgyver","$q","$scope",function($macgyver,$q,$scope){var $ctrl=this;$ctrl.errors,$scope.$on("mg.getForm",function(e,f){f.$ctrl=$ctrl,f.$scope=$scope}),$ctrl.validate=function(){return $q(function(resolve,reject){$q.all(_($macgyver.getAll($scope)).pickBy(function(c,k){return _.isFunction(c.validate)}).mapValues(function(c,k){return c.validate()}).value()).then(function(res){var errs=_.reduce(res,function(errs,err,id){return err&&(_.isArray(err)?err.filter(function(e){return!!e}).forEach(function(e){return errs.push({id:id,err:e})}):_.isString(err)?errs.push({id:id,err:err}):!1===v&&errs.push({id:id,err:"is not valid"})),errs},[]);_.forEach($macgyver.getAll($scope),function(component,id){return component.config.mgValidation=errs.some(function(e){return e.id==id})?"error":"success"}),_.isEmpty(errs)?($ctrl.errors=void 0,resolve()):($ctrl.errors=errs,reject(errs))}).catch(function(e){return reject(e)})})},$scope.$watch("$ctrl.config",function(){$ctrl.config&&_.isUndefined($ctrl.config.showTitle)&&($ctrl.config.showTitle=!1)})}],template:'\n\t\t\t<form submit="$ctrl.submit" class="form-horizontal">\n\t\t\t\t<div ng-show="$ctrl.errors" class="alert alert-warning animate fadeInDown">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li ng-repeat="err in $ctrl.errors">{{err.err}}</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\n\t\t\t\t<mg-container config="$ctrl.config" data="$ctrl.data"></mg-container>\n\t\t\t</form>\n\t\t'}),angular.module("macgyver").component("mgFormEditor",{templateUrl:"/units/macgyver/mgFormEditor.tmpl.html",bindings:{config:"<",data:"="},controller:["$element","$macgyver","$scope","TreeTools",function($element,$macgyver,$scope,TreeTools){var $ctrl=this;$ctrl.$macgyver=$macgyver,$ctrl.editing=!1,$ctrl.setEditing=function(editing){$ctrl.editing=editing,$element.toggleClass("editing",$ctrl.editing)},$scope.$evalAsync(function(){return $ctrl.setEditing(!0)}),$ctrl.categories=_($macgyver.widgets).filter(function(w){return w.userPlaceable}).map("category").sort().uniq().value(),$ctrl.category=$ctrl.categories[0],$ctrl.widgetAddDetails={},$ctrl.widgetAdd=function(direction,widget){var node;(node=_.isString(widget)?TreeTools.find($ctrl.config,{id:widget},{childNode:"items"}):_.isObject(widget)?widget:TreeTools.find($ctrl.config,{id:$ctrl.selectedWidget.id},{childNode:"items"}))&&($ctrl.widgetAddDetails={id:node.id,direction:direction},$("#modal-mgFormEditor-add").modal("show"))},$scope.$on("mg.mgFormEditor.widgetAdd",function(e,direction,widget){return $ctrl.widgetAdd(direction,widget)}),$ctrl.widgetAddSubmit=function(props){angular.merge($ctrl.widgetAddDetails,props),$("#modal-mgFormEditor-add").modal("hide");var node=TreeTools.find($ctrl.config,{id:$ctrl.widgetAddDetails.id},{childNode:"items"});if(!node)return console.error("Asked to create a widget around non-existant ID",$ctrl.widgetAddDetails);var nodeParent=TreeTools.parents($ctrl.config,{id:$ctrl.widgetAddDetails.id},{childNode:"items"}).slice(-2).slice(0,1)[0],nodeIndex=nodeParent.items.findIndex(function(i){return i.id==node.id}),prototypeWidget={id:$ctrl.widgetAddDetails.type+"-"+_.times(5,function(i){return _.sample("abcdefghijklmnopqrstuvwxyz").split("")}).join(""),type:$ctrl.widgetAddDetails.type};switch($ctrl.widgetAddDetails.direction){case"above":insertedIndex=nodeIndex-1<0?0:nodeIndex-1;nodeParent.items.splice(insertedIndex,0,prototypeWidget),$ctrl.widgetEdit(nodeParent.items[insertedIndex]);break;case"below":var insertedIndex=nodeIndex+1;nodeParent.items.splice(insertedIndex,0,prototypeWidget),$ctrl.widgetEdit(nodeParent.items[insertedIndex]);break;case"inside":node.items.push(prototypeWidget),$ctrl.widgetEdit(node.items[node.items.length-1])}},$ctrl.selectedWidget,$ctrl.selectedWidgetData,$ctrl.selectedWidgetForm,$ctrl.widgetName,$ctrl.widgetEdit=function(widget){var node;if(_.isObject(widget))node=widget;else{if(!$ctrl.selectedWidget)return;node=TreeTools.find($ctrl.config,{id:$ctrl.selectedWidget.id},{childNode:"items"})}node&&(node.type&&"string"==typeof node.type&&($ctrl.widgetName=" - "+node.type.replace(/^mg+/i,"").replace(/([A-Z])/g," $1").trim()),$ctrl.selectedWidgetData=node,$ctrl.selectedWidgetForm={type:"mgContainer",items:[{id:"globalConfig",type:"mgContainer",ignoreScope:!0,showTitle:!1,items:[{id:"id",type:"mgText",title:"ID"}]},{id:"sepGlobal",type:"mgSeperator",showTitle:!1},{id:"typeConfig",type:"mgContainer",ignoreScope:!0,showTitle:!1,items:_($macgyver.widgets[$ctrl.selectedWidgetData.type].config).map(function(v,k){return v.id=k,v.title||(v.title=_.startCase(k)),v}).filter(function(i){return"items"!=i.id}).value()},{id:"parentConfig",type:"mgContainer",ignoreScope:!0,showTitle:!1,items:_(_(TreeTools.parents($ctrl.config,node,{childNode:"items"})).slice(0,-1).reverse().map(function(p){return _.get($macgyver,["widgets",p.type,"configChildren"])}).filter().reduce(function(obj,p){return _.assign(obj,p)},{})).map(function(p,k){return p.id=k,p.title||(p.title=_.startCase(k)),p}).value()}]},$ctrl.setEditing(!1),$("#modal-mgFormEditor-edit").modal("show").one("hidden.bs.modal",function(){$ctrl.setEditing(!0)}))},$element.on("mousedown","mg-container > div",function(event){angular.element(this).closest(".modal").length||0==event.button&&(event.stopPropagation(),$scope.$apply(function(){$ctrl.widgetEdit()}))}),$element.on("contextmenu","mg-container > div",function(event){if(!angular.element(this).closest(".modal").length){event.stopPropagation(),event.preventDefault(),angular.element(document).one("mousedown",function(e){angular.element(e.target).closest(".dropdown-menu").length||e.stopPropagation(),setTimeout(function(){return angular.element("#mgFormEditor-dropdown-widget").css("display","none")},100)});var thisOffset=angular.element(this).offset();angular.element("#mgFormEditor-dropdown-widget").css({position:"absolute",display:"block",left:thisOffset.left+event.offsetX-220,top:thisOffset.top+event.offsetY-35})}}),$ctrl.widgetToggle=function(prop,startValue){var node=TreeTools.find($ctrl.config,{id:$ctrl.selectedWidget.id},{childNode:"items"});node&&(_.has(node,prop)?node[prop]=!node[prop]:node[prop]=!startValue)},$ctrl.widgetDelete=function(widget){var node=widget||TreeTools.find($ctrl.config,{id:$ctrl.selectedWidget.id},{childNode:"items"});if(node){var nodeParent=TreeTools.parents($ctrl.config,{id:node.id},{childNode:"items"}).slice(-2).slice(0,1)[0];if(!nodeParent)throw new Error("Cannot find widget parent for ID: "+node.id);var nodeIndex=nodeParent.items.findIndex(function(i){return i.id==node.id});nodeParent.items.splice(nodeIndex,1)}},$element.on("mouseover","mg-container > div",function(event){event.stopPropagation();var elem=angular.element(this);if(!elem.closest(".modal").length){var pos=elem.offset(),setCSS={left:pos.left,top:pos.top-3,width:elem.width(),height:elem.height()+6};$element.children(".mgFormEditor-mask-background").css(setCSS);$element.children(".mgFormEditor-mask-verbs").css({left:setCSS.left+setCSS.width-250-5,top:setCSS.top,width:250}),$scope.$apply(function(){$ctrl.selectedWidget=TreeTools.find($ctrl.config,{id:elem.attr("data-path")},{childNode:"items"})})}})}]}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgGrid",{title:"Grid layout",icon:"fa fa-dropbox",category:"Layout",isContainer:!0,config:{rows:{type:"mgNumber",default:1,min:1,max:100},cols:{type:"mgNumber",default:1,min:1,max:100}}})}]).component("mgGrid",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.$onInit=function(){$ctrl.config.rows=$ctrl.config.items.length,$ctrl.config.cols=Math.max.apply(Math,_toConsumableArray($ctrl.config.items.map(function(i){return i.items.length})))},$scope.$watchGroup(["$ctrl.config.rows","$ctrl.config.cols"],function(){_.has($ctrl,"config.rows")&&($ctrl.config.rows<$ctrl.config.items.length?$ctrl.config.items=$ctrl.config.items.slice(0,$ctrl.config.rows):$ctrl.config.rows>$ctrl.config.items.length&&_.range($ctrl.config.items.length,$ctrl.config.rows).forEach(function(i){$ctrl.config.items.push({id:$ctrl.config.id+"-row-"+i,type:"mgGridRow",items:[]})})),_.has($ctrl,"config.cols")&&$ctrl.config.items.forEach(function(row,r){row.items.length<$ctrl.config.cols?_.range(row.items.length,$ctrl.config.cols).forEach(function(c){row.items.push({id:$ctrl.config.id+"-row-"+r+"-col-"+c,type:"mgContainer",items:[]})}):row.items.length>$ctrl.config.cols&&(row.items=row.items.slice(0,$ctrl.config.cols))})})}],template:["$macgyver",function($macgyver){return'\n\t\t\t<table class="table table-striped table-bordered">\n\t\t\t\t<tr ng-repeat="row in $ctrl.config.items">\n\t\t\t\t\t<td ng-repeat="w in row.items" ng-switch="w.type">\n\t\t\t\t\t\t'+_.map($macgyver.widgets,function(w){return'<div ng-switch-when="'+w.id+'">'+w.template+"</div>"}).join("\n")+"\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t"}]}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgHeading",{title:"Heading",icon:"fa fa-header",category:"General Decoration",config:{text:{type:"mgText"}}})}]).component("mgHeading",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl)}],template:'\n\t\t\t<legend class="form-control-static">{{$ctrl.data || $ctrl.config.text}}</legend>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgHtml",{title:"Read-only HTML",icon:"fa fa-html5",category:"General Decoration",config:{text:{type:"mgHtml"}}})}]).component("mgHtml",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl)}],template:'\n\t\t\t<div class="form-control-static" ng-bind-html="$ctrl.data || $ctrl.config.text"></div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgImage",{title:"Image",icon:"fa fa-pencil-square",category:"Files and uploads",config:{title:{type:"mgText",default:"Attach image"},allowDelete:{type:"mgToggle",default:!0},showList:{type:"mgToggle",default:!0,help:"Show a list of images already uploaded"},listMode:{type:"mgChoiceButtons",enum:["list","thumbnails"],default:"thumbnails"}}})}]).component("mgImage",{bindings:{config:"<",data:"="},controller:["$http","$macgyver","$scope",function($http,$macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.urls={},$ctrl.getUrl=function(type,context){if(_.isString($ctrl.urls[type]))return url[type];if(_.isFunction($ctrl.urls[type]))return $ctrl.urls[type](Object.assign({},{type:type,widget:"mgImage",path:$macgyver.getPath($scope)},context));throw new Error("Unknown URL type: "+type)},$ctrl.$onInit=function(){$ctrl.urls.upload=$ctrl.config.urlUpload||$macgyver.settings.urlResolver||function(o){return"/api/widgets/"+o.path},$ctrl.listConfig=angular.extend({listMode:"thumbnails"},$ctrl.config,{mgPath:$macgyver.getPath($scope)})},$ctrl.isUploading=!1,$ctrl.getImage=function(dataURI,blob){var sigBlob=new Blob([blob],{type:"image/png"}),formData=new FormData;formData.append("file",sigBlob),$http.post($ctrl.getUrl("upload",{file:(new Date).toISOString()+".png"}),formData,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).then(function(){$ctrl.isUploading=!1,$macgyver.broadcast($scope,"mg.refreshUploads")}),$ctrl.showModal(!1),$ctrl.isUploading=!0},$ctrl.modalShown=!1,$ctrl.showModal=function(show){show?angular.element("#modal-mgImage-"+$ctrl.config.id).on("shown.bs.modal",function(){return $scope.$apply(function(){return $ctrl.modalShown=!0})}).on("hidden.bs.modal",function(){return $scope.$apply(function(){return $ctrl.modalShown=!1})}).modal("show"):angular.element("#modal-mgImage-"+$ctrl.config.id).modal("hide")}}],template:'\n\t\t\t<div id="modal-mgImage-{{$ctrl.config.id}}" class="modal fade">\n\t\t\t\t<div class="modal-dialog" style="width: 830px">\n\t\t\t\t\t<div class="modal-content">\n\t\t\t\t\t\t<div class="modal-header">\n\t\t\t\t\t\t\t<a class="close" data-dismiss="modal"><i class="fa fa-times"></i></a>\n\t\t\t\t\t\t\t<h4 class="modal-title">{{$ctrl.config.title || \'Attach image\'}}</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="modal-body">\n\t\t\t\t\t\t\t<div ng-if="$ctrl.modalShown">\n\t\t\t\t\t\t\t\t<ui-scribble editable="true" callback="$ctrl.getImage(dataURI, blob)" width="800" height="600"></ui-scribble>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="modal-footer">\n\t\t\t\t\t\t\t<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div ng-if="$ctrl.config.showList === undefined || $ctrl.config.showList">\n\t\t\t\t<mg-file-list config="$ctrl.listConfig" data="$ctrl.data"></mg-file-list>\n\t\t\t</div>\n\t\t\t<div ng-if="!$ctrl.files || !$ctrl.files.length" class="hidden-print">\n\t\t\t\t<div ng-if="$ctrl.isUploading" class="alert alert-info font-lg">\n\t\t\t\t\t<i class="fa fa-spinner fa-spin"></i>\n\t\t\t\t\tUploading signature...\n\t\t\t\t</div>\n\t\t\t\t<a ng-click="$ctrl.showModal(true)" class="btn btn-success">\n\t\t\t\t\t<i class="fa fa-plus"></i>\n\t\t\t\t\tAdd image\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgLabel",{title:"Read-only label",icon:"fa fa-font",category:"General Decoration",config:{text:{type:"mgText"}}})}]).component("mgLabel",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl)}],template:'\n\t\t\t<div class="form-control-static">{{$ctrl.data || $ctrl.config.text}}</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgList",{title:"List",icon:"fa fa-list-ol",category:"Simple Inputs",config:{allowDelete:{type:"mgToggle",default:!0},min:{type:"mgNumber",title:"Minimum number of items"},max:{type:"mgNumber",title:"Maximum number of items"},required:{type:"mgToggle",default:!1},numbered:{type:"mgToggle",default:!0}}})}]).component("mgList",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.validate=function(){return[$ctrl.config.required&&(!$ctrl.data||$ctrl.data.length)&&$ctrl.config.title+" is required",$ctrl.config.min&&$ctrl.data.length<$ctrl.config.min&&$ctrl.config.title+" has too few items (minimum is "+$ctrl.config.min+")",$ctrl.config.max&&$ctrl.data.length>$ctrl.config.max&&$ctrl.config.title+" has too many items (maximum is "+$ctrl.config.max+")"]},$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)}),$ctrl.listNewItem={text:""},$ctrl.addItem=function(){_.isArray($ctrl.data)||($ctrl.data=[]),$ctrl.data.push($ctrl.listNewItem.text),$ctrl.listNewItem.text=""},$ctrl.removeItem=function(index){$ctrl.data=$ctrl.data.filter(function(x,i){return i!=index})}}],template:'\n\t\t\t<form ng-submit="$ctrl.addItem()">\n\t\t\t\t<table class="table table-bordered table-hover">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr ng-repeat="row in $ctrl.data track by $index">\n\t\t\t\t\t\t\t<td ng-if="$ctrl.config.numbered == undefined || $ctrl.config.numbered" class="text-center font-md">{{$index + 1 | number}}</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<input ng-model="row" type="text" class="form-control"/>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td ng-if="$ctrl.config.allowDelete == undefined || $ctrl.config.allowDelete">\n\t\t\t\t\t\t\t\t<a ng-click="$ctrl.removeItem($index)" class="btn btn-danger btn-sm visible-parent-hover"><i class="fa fa-trash-o"></i></a>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t\t<tfoot class="hidden-print">\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td ng-if="$ctrl.config.numbered == undefined || $ctrl.config.numbered" class="text-center" width="30px">\n\t\t\t\t\t\t\t\t<button type="submit" class="btn" ng-class="$ctrl.isAdding ? \'btn-success\' : \'btn-disabled\'">\n\t\t\t\t\t\t\t\t\t<i class="fa fa-plus"></i>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<input ng-model="$ctrl.listNewItem.text" type="text" class="form-control"/>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td width="35px">&nbsp;</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tfoot>\n\t\t\t\t</table>\n\t\t\t</form>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgNumber",{title:"Number",icon:"fa fa-sort-numeric-asc",category:"Simple Inputs",config:{min:{type:"mgNumber",title:"Minimum value"},max:{type:"mgNumber",title:"Maximum value"},step:{type:"mgNumber",title:"Value to increment / decrement by"},slider:{type:"mgToggle",title:"Display slider",default:!1,help:"Whether to display a fixed slider rather than a free form text input box"},placeholder:{type:"mgNumber",help:"Ghost text to display when there is no value"},required:{type:"mgToggle",default:!1}}})}]).component("mgNumber",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.validate=function(){return[$ctrl.config.required&&!$ctrl.data&&$ctrl.config.title+" is required",$ctrl.config.min&&$ctrl.data<$ctrl.config.min&&$ctrl.config.title+" is too small (minimum value is "+$ctrl.config.min+")",$ctrl.config.max&&$ctrl.data>$ctrl.config.max&&$ctrl.config.title+" is too large (maximum value is "+$ctrl.config.max+")"]},$ctrl.add=function(steps){return $ctrl.data+=steps*($ctrl.step||1)},$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<div ng-if="$ctrl.config.slider">\n\t\t\t\t<input ng-model="$ctrl.data" type="range" class="form-control" placeholder="{{$ctrl.config.placeholder}}" min="{{$ctrl.config.min}}" max="{{$ctrl.config.max}}" step="{{$ctrl.config.step}}"/>\n\t\t\t</div>\n\t\t\t<div ng-if="!$ctrl.config.slider" class="input-group">\n\t\t\t\t<a ng-click="$ctrl.add(-1)" class="btn btn-default input-group-addon hidden-print"><i class="fa fa-arrow-down"></i></a>\n\t\t\t\t<input ng-model="$ctrl.data" type="number" class="form-control" placeholder="{{$ctrl.config.placeholder}}" min="{{$ctrl.config.min}}" max="{{$ctrl.config.max}}" step="{{$ctrl.config.step}}"/>\n\t\t\t\t<a ng-click="$ctrl.add(1)" class="btn btn-default input-group-addon hidden-print"><i class="fa fa-arrow-up"></i></a>\n\t\t\t</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgSeperator",{title:"Seperator",icon:"fa fa-minus",category:"General Decoration"})}]).component("mgSeperator",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl)}],template:"\n\t\t\t<hr/>\n\t\t"}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgSignature",{title:"Signature input",icon:"fa fa-picture-o",category:"Files and uploads",config:{allowDelete:{type:"mgToggle",default:!0,help:"Allow the user to delete the signature and re-sign"}}})}]).component("mgSignature",{bindings:{config:"<",data:"="},controller:["$http","$macgyver","$scope",function($http,$macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.urls={},$ctrl.getUrl=function(type,context){if(_.isString($ctrl.urls[type]))return $ctrl.urls[type];if(_.isFunction($ctrl.urls[type]))return $ctrl.urls[type](Object.assign({},{type:type,widget:"mgSignature",path:$macgyver.getPath($scope)},context));throw new Error("Unknown URL type: "+type)},$ctrl.$onInit=function(){$ctrl.urls.query=$ctrl.config.urlQuery||$macgyver.settings.urlResolver||"/api/widgets",$ctrl.urls.upload=$ctrl.config.urlUpload||$macgyver.settings.urlResolver||function(o){return"/api/widgets/"+o.path},$ctrl.urls.delete=$ctrl.config.urlDelete||$macgyver.settings.urlResolver||function(o){return"/api/widgets/"+o.path},$ctrl.refresh()},$ctrl.files,$ctrl.refresh=function(){return $http.get($ctrl.getUrl("query")).then(function(data){return $ctrl.files=data.data})},$ctrl.isUploading=!1,$ctrl.getSignature=function(dataURI,blob){var sigBlob=new Blob([blob],{type:"image/png"}),formData=new FormData;formData.append("file",sigBlob),$http.post($ctrl.getUrl("upload",{file:"signature.png"}),formData,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).then(function(){$ctrl.isUploading=!1,$ctrl.refresh()}),$ctrl.isUploading=!0},$ctrl.delete=function(file){return $http.delete($ctrl.getUrl("delete",{file:"signature.png"})).then($ctrl.refresh,$ctrl.refresh)}}],template:'\n\t\t\t<div ng-if="$ctrl.files && $ctrl.files.length" class="visible-parent-hover-target">\n\t\t\t\t<img ng-src="{{$ctrl.files[0].url}}" class="img-responsive"/>\n\t\t\t\t<a ng-click="$ctrl.delete()" class="btn btn-danger btn-circle btn-lg btn-fab visible-parent-hover" tooltip="Delete the signature"><i class="fa fa-fw fa-trash"></i></a>\n\t\t\t</div>\n\t\t\t<div ng-if="!$ctrl.files || !$ctrl.files.length">\n\t\t\t\t<div ng-if="$ctrl.isUploading" class="alert alert-info font-lg">\n\t\t\t\t\t<i class="fa fa-spinner fa-spin"></i>\n\t\t\t\t\tUploading signature...\n\t\t\t\t</div>\n\t\t\t\t<div ng-if="!$ctrl.isUploading">\n\t\t\t\t\t<ui-scribble editable="false" callback="$ctrl.getSignature(dataURI, blob)"></ui-scribble>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgTable",{title:"Table layout",icon:"fa fa-table",category:"Layout",isContainer:!0,isContainerArray:!0,config:{allowAdd:{type:"mgToggle",title:"Allow Row Addition",default:!0},allowDelete:{type:"mgToggle",title:"Allow Row Deletion",default:!0},textEmpty:{type:"mgText",title:"No data message",default:"No data"},items:{type:"mgTableEditor",default:[{id:"col1",type:"mgText"},{id:"col2",title:"mgText"},{id:"col3",title:"mgText"}]}},configChildren:{showTitle:{type:"mgToggle",default:!1,title:"Show Title"}}})}]).component("mgTable",{bindings:{config:"<",data:"="},controller:["$element","$macgyver","$scope",function($element,$macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.isEditing=!!$element.closest("mg-form-editor").length,$scope.$watchGroup(["$ctrl.isEditing","$ctrl.config.items","$ctrl.config.default"],function(){$ctrl.isEmpty()&&(_.isEmpty($ctrl.config.default)?$ctrl.isEditing&&($ctrl.fakeData=[_($ctrl.config.items).mapKeys("id").mapValues(function(col){return col.default}).value()]):($ctrl.data=$ctrl.config.default,$ctrl.isEditing&&($ctrl.fakeData=$ctrl.data)))}),$scope.$watch("$ctrl.data",function(){_.isArray($ctrl.data)||($ctrl.data=[])}),$ctrl.allowAdd=!1,$scope.$watch("$ctrl.config.allowAdd",function(){$ctrl.allowAdd=void 0===$ctrl.config.allowAdd||$ctrl.config.allowAdd}),$ctrl.isAdding=!1,$ctrl.newRow={},$scope.$watch("$ctrl.newRow",function(){$ctrl.isAdding=!_.isEmpty($ctrl.newRow)},!0),$ctrl.createRow=function(){$ctrl.data.push($ctrl.newRow),$ctrl.newRow={},$element.find(".mgTable-append > td input").first().focus()},$element.on("keypress",function(e){return $scope.$apply(function(){13==e.which&&(e.stopPropagation(),e.preventDefault(),$ctrl.createRow())})}),$ctrl.allowDelete=!1,$scope.$watch("$ctrl.config.allowDelete",function(){$ctrl.allowDelete=void 0===$ctrl.config.allowDelete||$ctrl.config.allowDelete}),$ctrl.deleteRow=function(index){return $ctrl.data.splice(index,1)},$ctrl.isEmpty=function(){return _.isEmpty($ctrl.data)||1==$ctrl.data.length&&_.every($ctrl.data[0],function(v){return!v})}}],template:'\n\t\t\t<table class="table table-bordered table-hover">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th ng-if="$ctrl.config.rowNumbers === undefined || $ctrl.config.rowNumbers" width="30px" class="text-center font-md">#</th>\n\t\t\t\t\t\t<th ng-repeat="col in $ctrl.config.items track by col.id" style="{{(col.width ? \'width: \' + col.width + \'; \' : \'\') + col.class}}">\n\t\t\t\t\t\t\t{{col.title}}\n\t\t\t\t\t\t</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody ng-if="$ctrl.isEditing">\n\t\t\t\t\t<tr ng-repeat="row in $ctrl.fakeData">\n\t\t\t\t\t\t<td ng-if="$ctrl.config.rowNumbers === undefined || $ctrl.config.rowNumbers" class="text-center font-md">{{$index + 1 | number}}</td>\n\t\t\t\t\t\t<td ng-repeat="col in $ctrl.config.items track by col.id" class="{{col.class}}">\n\t\t\t\t\t\t\t<mg-container config="{items: [col]}" data="row"></mg-container>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t\t<tbody ng-if="!$ctrl.isEditing" class="hidden-print">\n\t\t\t\t\t<tr ng-if="!$ctrl.data">\n\t\t\t\t\t\t<td colspan="{{$ctrl.config.items.length + ($ctrl.config.rowNumbers === undefined || $ctrl.config.rowNumbers ? 1 : 0}}">\n\t\t\t\t\t\t\t<div class="alert alert-warning m-10">{{$ctrl.config.textEmpty || \'No data\'}}</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr ng-repeat="row in $ctrl.data">\n\t\t\t\t\t\t<td ng-if="$ctrl.config.rowNumbers === undefined || $ctrl.config.rowNumbers" class="text-center">\n\t\t\t\t\t\t\t<div class="btn-group">\n\t\t\t\t\t\t\t\t<a class="btn btn-ellipsis btn-ellipsis-sm dropdown-toggle" data-toggle="dropdown">{{$index + 1 | number}}</a>\n\t\t\t\t\t\t\t\t<ul class="dropdown-menu">\n\t\t\t\t\t\t\t\t\t<li ng-if="$ctrl.allowDelete"><a ng-click="$ctrl.deleteRow($index)"><i class="fa fa-trash-o"></i> Delete</a></li>\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td ng-repeat="col in $ctrl.config.items track by col.id" class="{{col.class}}">\n\t\t\t\t\t\t\t<mg-container config="{items: [col]}" data="row"></mg-container>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr class="mgTable-append" ng-if="$ctrl.allowAdd">\n\t\t\t\t\t\t<td class="text-center">\n\t\t\t\t\t\t\t<a ng-click="$ctrl.createRow()" class="btn" ng-class="$ctrl.isAdding ? \'btn-success\' : \'btn-disabled\'">\n\t\t\t\t\t\t\t\t<i class="fa fa-plus"></i>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td ng-repeat="col in $ctrl.config.items track by col.id">\n\t\t\t\t\t\t\t<mg-container config="{items: [col]}" data="$ctrl.newRow"></mg-container>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgTableEditor",{title:"Table Editor",icon:"fa fa-pencil-square-o",config:{},userPlaceable:!1})}]).component("mgTableEditor",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<table class="table table-bordered table-striped">\n\t\t\t</table>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgText",{title:"Textbox",icon:"fa fa-pencil-square-o",category:"Simple Inputs",config:{lengthMin:{type:"mgNumber",title:"Minimum Length"},lengthMax:{type:"mgNumber",title:"Maximum Length"},placeholder:{type:"mgText",help:"Ghost text to display when the textbox has no value"},required:{type:"mgToggle",default:!1}}})}]).component("mgText",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.validate=function(){return[$ctrl.config.required&&!$ctrl.data&&$ctrl.config.title+" is required",$ctrl.config.lengthMin&&_.isString($ctrl.data)&&$ctrl.data.length<$ctrl.config.lengthMin&&$ctrl.config.title+" is too small (minimum length is "+$ctrl.config.lengthMin+")",$ctrl.config.lengthMax&&_.isString($ctrl.data)&&$ctrl.data.length>$ctrl.config.lengthMax&&$ctrl.config.title+" is too long (maximum length is "+$ctrl.config.lengthMax+")"]},$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<input ng-model="$ctrl.data" type="text" class="form-control" placeholder="{{$ctrl.config.placeholder}}"/>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgTextArea",{title:"Multi-line text",icon:"fa fa-align-justify",category:"Simple Inputs",config:{rows:{type:"mgNumber",title:"Line height",default:3},lengthMin:{type:"mgNumber",title:"Minimum Length"},lengthMax:{type:"mgNumber",title:"Maximum Length"},placeholder:{type:"mgTextArea",help:"Ghost text to display when the textbox has no value"},required:{type:"mgToggle",default:!1}}})}]).component("mgTextArea",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.validate=function(){return[$ctrl.config.required&&!$ctrl.data&&$ctrl.config.title+" is required",$ctrl.config.lengthMin&&_.isString($ctrl.data)&&$ctrl.data.length<$ctrl.config.lengthMin&&$ctrl.config.title+" is too small (minimum length is "+$ctrl.config.lengthMin+")",$ctrl.config.lengthMax&&_.isString($ctrl.data)&&$ctrl.data.length>$ctrl.config.lengthMax&&$ctrl.config.title+" is too long (maximum length is "+$ctrl.config.lengthMax+")"]},$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<textarea ng-model="$ctrl.data" class="form-control" placeholder="{{$ctrl.config.placeholder}}" minlength="{{$ctrl.config.lengthMin}}" maxlength="{{$ctrl.config.lengthMin}}" rows="{{$ctrl.config.rows || 3}}"/>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgTime",{title:"Time selection",icon:"fa fa-clock-o",category:"Simple Inputs",config:{min:{type:"mgTime",title:"Earliest time"},max:{type:"mgNumber",title:"Latest time"},required:{type:"mgToggle",default:!1}}})}]).component("mgTime",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.validate=function(){return[$ctrl.config.required&&!$ctrl.data&&$ctrl.config.title+" is required",$ctrl.config.min&&_.isString($ctrl.data)&&$ctrl.data<$ctrl.config.min&&$ctrl.config.title+" is too early (earliest time is "+$ctrl.config.min+")",$ctrl.config.max&&_.isString($ctrl.data)&&$ctrl.data>$ctrl.config.max&&$ctrl.config.title+" is too late (latest time is "+$ctrl.config.max+")"]},$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<input ng-model="$ctrl.data" type="time" class="form-control"/>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgToggle",{title:"Switch",icon:"fa fa-toggle-on",category:"Simple Inputs",config:{onText:{type:"mgText",default:"On"},offText:{type:"mgText",default:"Off"}}})}]).component("mgToggle",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<div class="btn-group">\n\t\t\t\t<a ng-click="$ctrl.data = !$ctrl.data" class="btn" ng-class="!$ctrl.data ? \'btn-danger\' : \'btn-default\'">{{$ctrl.config.offText || \'Off\'}}</a>\n\t\t\t\t<a ng-click="$ctrl.data = !$ctrl.data" class="btn" ng-class="$ctrl.data ? \'btn-success\' : \'btn-default\'">{{$ctrl.config.onText || \'On\'}}</a>\n\t\t\t</div>\n\t\t'}),angular.module("macgyver").config(["$macgyverProvider",function($macgyverProvider){return $macgyverProvider.register("mgUrl",{title:"URL",icon:"fa fa-globe",category:"Simple Inputs",config:{placeholder:{type:"mgUrl",help:"Ghost text to display when the textbox has no value"},required:{type:"mgToggle",default:!1}}})}]).component("mgUrl",{bindings:{config:"<",data:"="},controller:["$macgyver","$scope",function($macgyver,$scope){var $ctrl=this;$macgyver.inject($scope,$ctrl),$ctrl.validate=function(){return[$ctrl.config.required&&!$ctrl.data&&$ctrl.config.title+" is required"]},$scope.$watch("$ctrl.data",function(){_.isUndefined($ctrl.data)&&_.has($ctrl,"config.default")&&($ctrl.data=$ctrl.config.default)})}],template:'\n\t\t\t<input ng-model="$ctrl.data" type="url" class="form-control" placeholder="{{$ctrl.config.placeholder}}"/>\n\t\t'});